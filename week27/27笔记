
栈：就像是一堆叠起来的东西，你只能往这个堆上面一层层的添加和取东西。最后添加的东西最先被取出。栈进和出都在一边
队列：队列就是一个数据集合，允许在列表的一段进行插入，另一端删除。一边进另一边出。
      进行插入的一段成为队尾，删除的一端就是队头。
     双向队列： 队列的两端都允许进队和出队

    进队：append
    出队：popleft
    双向队列队首进队：appendleft
    双向队列队尾出队：pop

链表
    链表相对于列表，插入和删除都会更快。因为链表的时间复杂度是o(1),而列表的是o(n)
    p.next=curNode.next

python里面的集合和字典使用了哈希函数，根据哈希值(也就是元素的下标)来存放对应的元素。查找的时候也是根据哈希值来直接取对应的元素。时间复杂度o(1)
当两个元素的哈希值相同时，就会利用链表，将相同哈希值的元素连起来，这样直接查找这个链里面就能找到对应元素。
集合的实际存储如 假设hash(1)=0,hash(6)=2,hash(7)=4,hash(9)=5,那么对应在集合里面存放形式就为{1，None,6,None,7,9}。查找的时候直接根据hash出来的值来精确查找，不用遍历整个集合。
所以集合的时间复杂度为o(1)
而列表是遍历整个列表，找到里面的元素。时间复杂度为o(n)
所以，对集合和字典的插入和查找要比列表要快。

字典：
    在python中的字典 {'name':'alex','age':18,'gender':'man'}
    使用哈希表来存储字典，通过哈希将字典的键映射为下标，加上h('name')=3,h('age')=1,h('gender')=4,则哈希表的存储为[None,18,None,None,'alex','man']
    在字典键值对不多时，几乎不会发生冲突，此时查找元素的时间复杂度为o(1)