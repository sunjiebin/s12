上节回顾
1.基本生命周期
2.url
    /index/ index
    /list/(\d+) index()
    /list/(\d+) include index()
3.views
    request.POST/GET等其实都是调用了request.body，将body里面的数据提取出来转换为字典返回。
    当我们用put等方法提交数据时，django没有对应的处理方法，这时候就需要我们利用request.body来自己取值了。
  request.body      <--请求的内容部分都在body里面，下面的方法都是从body里面来的
    request.POST
    request.GET
    request.GET.getlist
    request.FILES
  request.Meta      <--请求头部分，下面的几种是从请求头里面来的
    request.path_info
    request.COOKIES
    request.method

    response还可以接字节
    a='中国'
    return HttpResponse(a)
    还可以设置自定义响应头里面的值
    response=HttpResponse(a)
    在响应头里面添加 name='alex'的信息
    response['name']='alex'
    设置cookie
    response.set_cookie()
    return response

4. Model操作
    models.tb.object.create()
    models.tb.object.all()
    models.tb.object.update()
    models.tb.object.filter()
    models.tb.object.delete()
    models.tb.object.values
    models.tb.object.values_list
    models.tb.object.get
    models.tb.objects.filter().update()
    models.tb.objects.filter().first()
    models.tb.objects.filter(**dic)
    models.tb.objects.filter().count()
    models.tb.objects.filter(id__gt=1)
    models.tb.objects.all().order_by()
    models.tb.objects.filter(id__range=[1,2])
    models.tb.objects.filter(id__in=[1,3])
    多对多
    obj.set
    obj.add(1,2,3)
    obj.add([1,2,3])
    obj.remove([1,2,3])
    obj.clear()
    obj.all()

    class A:
        ...
        b_set 可以通过a反向跨表查询
     class B:
        id
        fk = ForignKey(A)

本节内容
1.session
    基于cookie做用户验证时：敏感信息不适合放在cookie中

    a.session原理
        cookie是保存在浏览器端的键值对
        session是保存在服务器端的键值对

    在使用session前，要先python manage.py makemigrations  python manage.py migrate生成数据库，因为
    session默认是保存在数据库里面的。

session和cookie的区别
    cookie是保存在浏览器里面的
    session是保存在服务器端的，可以保存在数据库，缓存，文件里面都可以。数据在服务器端，利用随机的Key和浏览器cookie里面的比对来交互。
    session是依赖于cookie的。如果浏览器里面的cookie清空了，那么那个随机字符串也就没有了，所以登录也就失效了。

    session操作
        session里面的操作其实就是对字典进行操作，所以很多都是跟字典一样的方法
        获取
        request.session['k1']
        request.session.get('k1',None)
        设置
        request.session['k1']=123
        request.session.setdefault('k1',123) 如果存在k1则不操作，不存在就创建
        删除
        del request.session['k1'] 删除k1,只是删除了session里面的某个键值对
        request.session.delete('session_key')  删除整个session key.
        request.session.clear()     清空当前用户的session，不用自己输入key.
        相当于request.session.delete(request.session.session_key)

        request.session.keys()
        request.session.items()

        获取当前用户的session的随机字符串
        request.session.session_key

        将所有session失效日期早于当前日期的数据删除
        如果写入的是数据库，那么这些session数据是不会自动删除的，那么有些已经失效的session就需要手动删除。如果写入的是缓存，则不用管，缓存会自动根据失效时间来
        删除session
        request.session.clear_expired()

        #检查session中的随机字符串是否存在，这个功能很少用，因为request.session['k1']实际默认就包含了这个功能
        request.session.exist()

        配置文件中设置默认操作(通用配置)
		SESSION_COOKIE_NAME ＝ "sessionid"                       # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）
		SESSION_COOKIE_PATH ＝ "/"                               # Session的cookie保存的路径（默认）
		SESSION_COOKIE_DOMAIN = None                             # Session的cookie保存的域名（默认）
		SESSION_COOKIE_SECURE = False                            # 是否Https传输cookie（默认）
		SESSION_COOKIE_HTTPONLY = True                           # 是否Session的cookie只支持http传输（默认）
		SESSION_COOKIE_AGE = 1209600                             # Session的cookie失效日期（2周）（默认）
		SESSION_EXPIRE_AT_BROWSER_CLOSE = False                  # 是否关闭浏览器使得Session过期（默认）
		# set_cookie('k',123)
		SESSION_SAVE_EVERY_REQUEST = False                       # 是否每次请求都保存Session，默认修改之后才保存（默认）
		SESSION_COOKIE_HTTPONLY=True时，只支持http传输，使用js命令则无法获取到该session.
		SESSION_COOKIE_AGE = 1209600 这个是django的默认值，所以对于django后台等操作很多默认是两周过期。
		SESSION_SAVE_EVERY_REQUEST = False 默认是false，即session超时时间是根据session生成时间来算的，而不是最后一次操作时间来算的。现实中的场景应该是True,
		                                   即计算超时时间以最后一次操作时间为准。就比如我们设置登录信息半小时过期，一般是指最后一次操作后半小时过期，而不是
		                                   以设置时的时间的半小时。

        SESSION_ENGIN = 'django.contrib.sessions.backends.db'     #设置session存放的引擎，默认是db放在数据库里面。默认支持缓存、文件、加密cookie、数据库、缓存+数据库等
        SESSION_ENGIN = 'django.contrib.sessions.backends.cache'  #表示放在缓存里面，只需要代码更改就行了，其它的代码都不用改。
        SESSION_CACHE_ALIAS= 'default'                            #链接的名字，后面配置缓存的一些连接时会有一个别名，这个名字和那个名字对应，就代表用该缓存的配置。
        SESSION_SAVE_EVERY_REQUEST = True

        SESSION_ENGIN = 'django.contrib.sessions.backends.file'   #使用文件来保存session
        SESSION_FILE_PATH = os.path.join(BASE_DIR,'cache')        #保存文件的session存放位置

        SESSION_ENGIN = 'django.contrib.sessions.backends.cached_db'    #缓存+数据库类型，即默认先去缓存拿，缓存要没有就去数据库拿。
        SESSION_ENGIN = 'django.contrib.sessions.backends.signed_cookies'   #加密的cookie，将session加密后放在cookie里面。

2. CSRF
    a. CSRF原理
        我们开启该功能后，在POST访问django时，django会先发送一串随机字符串过来，在浏览器的cookie里面会有一个csrftoken的key，当我们用POST去提交数据时，需要把这个key值传递过去，
        django首先会在request请求头里面找该键值对，如果客户端发来的请求有该字符串且和服务端的是一致的，则接收post请求，如果没有，则返回403的错误。
        该功能可以防止跨站请求伪造，比如我登录一个其它的网站，然后这个网站发送一个POST请求到我的站点，如果没有开启该功能，如果提交格式是正确的，那么其它站点则有可能
        会成功提交到我的站点。

        在ajax提交时，只需要加上下面的就好，注意X-CSRFtoken这个名称不要写错，名字不能随便写
        headers:{'X-CSRFtoken':$.cookie('csrftoken')},
        如果用form表单来提交,加上下面一行即可
        {% csrftoken %}

        在settings里面的全局开关
            'django.middleware.csrf.CsrfViewMiddleware',
        如果我们想对个别的函数进行单独设置，比如有的函数不需要csrf验证，可以通过下面的装饰器来实现
        先导入模块
        from django.views.decorators.csrf import csrf_exempt,csrf_protect
        @csrf_exempt        这个装饰器用于忽略csrf检测，这样就算全局打开了检测，实际在该函数中也不必对csrf配置
        @csrf_protect       开启检测，如果全局关了，加上这个将强制检测。

3. 中间件

        在settings的MIDDLEWARE里面专门用于配置中间件，里面的方法都是中间件，在访问django时，都会经过这些中间件的过滤。
        CSRF就是一个中间件，所有请求都会经过定义的这个方法，该方法就会检测是否符合csrf定义的规则，如果post请求里面没有csrftoken，
        则在csrf这里就会返回403了，请求也就不会再继续下去。

        中间件用于对所有的请求做校验，比如IP黑名单过滤，禁止某个app访问所有页面，某个页面也行。

        自定义中间件，需要先继承MiddlewareMixin类。
        process_request,process_response的名称是固定的，用于接收和返回，不能随意修改

        from django.utils.deprecation import MiddlewareMixin
        class row1(MiddlewareMixin):
            def process_request(self,request):
                print('中间件1')
            def process_view(self,request,view_func,view_func_args,view_func_kwargs):
                print('第二层1')
            def process_response(self,request,response):
                print('返回1')
                return response
            def process_exception(self,request,exception):
                # 如果exception是ValueError类型。isinstance用于判断对象类型。如isinstance(aa,str) 判断aa变量是否为str类型
                if isinstance(exception,ValueError):
                    print('值错误',request,exception)
                elif isinstance(exception,TypeError):
                    print('类型错误',request,exception)
                return HttpResponse('程序有错误')

        在django1.10之后，process_request遇到return后，会从当前函数开始返回，在这之前的老版本中，会从最后一个中间件返回。
        流程：
            从上自下依次经过process_request-->遇到url之后-->再从上至下执行process_view-->执行对应函数-->再从下自上执行process_response。
            如果函数出错，则从下至上先执行process_exception.然后执行process_response.


4. 缓存
    可以支持多种缓存格式，文件/缓存/数据库等，要用缓存，首先的在settings里面进行配置。
    配置：
        CACHE = {
            'default':{
            'BACKEND':'django.core.cache.backends.filebased.FileBasedCache',            使用的引擎，我这里是以文件形式存放
            'LOCATION': os.path.join(BASE_DIR,'cache')          文件存放的位置
            'TIMEOUT':              超时时间，默认300，None表示永不过期，0表示立即过期
            ’OPTIONS':{
                'MAX_ENTRIES':300   最大缓存个数，超过后会开始清除缓存

            }
            }
        }


    5种配置
    3中应用：

        全局缓存
        全局缓存是针对整个网站的所有页面都进行缓存，比如一个静态网站，所有数据很少变动的博客等可以用。。
        在settings文件的中间件配置的前后加上一下两个类。
        FetchFromCacheMiddleware里面处理进来的request请求，判断是否有缓存，如果有，则从缓存直接取，如果没有，则从views视图里面取。
        UpdateCacheMiddleware里面包含response返回的请求，在返回的最后一个节点进行处理，如果没有缓存，则将页面加入缓存。
        MIDDLEWARE = [
             'django.middleware.cache.UpdateCacheMiddleware',
             ...其他中间件
             'django.middleware.cache.FetchFromCacheMiddleware',
        ]
        视图函数缓存
        导入模块cache_page，然后用@cache_page来装饰函数，就实现了对整个函数缓存
            from django.views.decorators.cache import cache_page
            @cache_page(10)
            def cache(request):
                import time

        模板缓存
        在html模板文件里面先load加载cache，然后将要缓存的内容放在cache里面。
            {% load cache %}
            {% cache 10 aa %}
                {{ t }}
            {% endcache %}

        注意三个方式的优先级：全局>视图>模板  所以，当我们在全局里面设置了缓存，那么另外两个缓存配置是不会生效的。
        根据django的请求生命周期来看，首先是到全局的中间件，如果全局的中间件有缓存，那么直接取缓存返回，也就不会经过视图和模板了。
        如果全局的没有，再到视图缓存，如果有就会返回，不用再到模板里面渲染，
        全局视图都没有，才会到模板里面的缓存。

5. 信号
    信号用于在初始化执行某些操作前后进行额外的操作。有点类似于装饰器，但是比装饰器更灵活，粒度更细。
    比如，我要在插入数据前后/建表前后/删除前后/链接数据库前 等情况下，执行某些操作。就可以用信号。
    信号的优势在于可以解耦，方便更改任务。有些任务更改比较频繁，频繁更改业务代码麻烦且易出错，通过信号就只需要更改信号里面的函数即可。
    而与业务代码无关。比如监控，今天想用短信，改天改成邮箱，用信号就可以很方便的切换。

    django内置信号
        先写一个信号的函数sg.py
        导入信号模块
        from django.db.models.signals import pre_init,post_init
        定义要执行的函数
        def f1(sender,**kwargs):
        print('single call')
        将函数注册进信号
        pre_init.connect(f1)
        触发信号
        在项目下的__init__.py初始化函数里面导入这个sg.py。代表每次启动应用时都执行了这个函数。这样就注册了里面定义的信号。否则写了也不会生效。
        __init__.py
        import sg.py
    自定义信号
        定义信号
           import django.dispatch
            pizz_done=django.dispatch.Signal(providing_args=["toppings","size"])
        注册信号
            def callback(sender,**kwargs):
                print(sender,kwargs)
            pizz_done.connect(callback)
        触发信号
            from 路径 import pizz_done
            pizz_done.send(sender='seven',toppings=123,size=22)

6. Form操作
    -  验证用户请求
      导入模块
        from django.forms import fields,widgets
      创建form类
        class FM(forms.Form):
            user=fields.CharField(error_messages={'required':'用户名不能为空'},initial='sun',label='用户名',disabled=True)
            pwd=fields.CharField(max_length=12,min_length=6,error_messages={'required':'密码不能为空','min_length':'太短了','max_length':'太长了'},widget=widgets.PasswordInput)
      函数中调用类
        实例化对象
        obj=FM()
        可以直接传入字典作为input里面的默认值
        obj=FM({'user':'v1','pwd':'v2'})
        调用form的方法
        obj.is_valid() 校验结果，如果校验都通过，则返回True
        obj.cleaned_data  返回校验通过后的数据，如果校验不通过，则为Null
        obj.errors  返回校验不通过时的错误信息
        return  render(request,'fm.html',{'obj':obj})  将obj对象传递给HTML模板

    在HTML模板中引用form对象，生成对应的input框
        {{ obj.email }}     生成email输入框
        {{ obj.errors.email.0 }}    显示email框校验失败的结果

        自动生成obj里面定义的所有输入框
        {{ obj.as_p }}      p段落的形式生成所有input框
        {{ obj.as_ul }}     ul标题的形式
        {{ obj.as_table }}  table表格的形式

    django内置字段：
        字段主要用来校验，不同的字段实现不同的校验功能
        #单选按钮
        c3=fields.ChoiceField(choices=[(0,'北京'),(1,'上海'),(2,'NewYork')],widget=widgets.RadioSelect)
        pwd=fields.SlugField(max_length=12,min_length=6,
                         error_messages={'required':'密码不能为空','min_length':'太短了','max_length':'太长了','invalid':'只支持数字字母下划线减号'},
                         widget=widgets.PasswordInput)

        Field               基本属性
            required=True   是否可以为空
            label='用户名'  input框前面的标签名，默认将用from函数的变量名
            inital='root'   初始值
            help_text='aa'  标签提示信息,似乎不生效
            error_messages=None         出错后的显示信息
            show_hidden_inital=False    是否在当前插件后在加一个隐藏的且具有默认值的插件（可用于校验两次输入是否一致，如改密码不能改一样的密码）
            validators=[]   自定义验证规则
            localize=False  是否支持本地化时间，默认utc时间
            disabled=False  是否可以编辑，就比如我们停止注册功能，那么就可以把注册的输入框设置成disabled=True
            label_suffix=None   label内容的后缀，就比如“用户名：”的这个冒号
        CharField(Field)        继承Field的属性
            max_length=None
            min_length=None         最小长度
            strip=True              是否自动去掉空格
        InterField(Field)
        FloatField(Field)
        DateField
        TimeField
        DateTimeField
        EmailField
        FileField                   上传文件，会生成一个文件上传的按钮
        URLField
        ChoiceField                 选择 单选/多选等
        ComboField                  混合验证
            比如我既要支持CharField验证，又要支持EmailField验证
            fields.ComboField(fields=[fields.CharField(max_length=20),fields.EmailField(),])
        FilePathField(ChoiceField)  用于将指定目录下的文件都以select框的形式显示出来,提交时就会将该文件路径提交上去。比如一个文件夹下都是脚本，让你选择执行那个脚本。
        GenericIPAddressField       解析IP地址格式
            protocol='both'         两种都支持
            unpack_ipv4=False       解析成IPV4地址
        SlugField(CharField)        数字字母下划线减号  其他的都不行 可以用于限定输入的字符类型

    常用插件widget
    插件用于生成不同的input类型
        插件非常多，可以实现单选/多选/复选/密码框/select框等各类input框都可以。
        widget=widgets.PasswordInput
        widget=widgets.RadioSelect
        插件里面还可以定义属性，这样就可以实现对input框自定义样式等功能
        widget=widgets.Textarea(attrs={'class':'c1','name':'msg'})

    自定义
        - 类
        - 字段（校验）
        - 插件（生成HTML）

    初始化操作

