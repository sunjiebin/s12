21节内容回顾
html里面使用函数
1. 在settings注册创建的app01项目
2. 建立templatetags文件夹
3. 建立filter.py函数
4. 导入template模块，该模块用于生成模板装饰器
    from django import template
5. 导入mark_safe模块,该模块用于向前端页面返回html标签时，告诉前端这个数据是安全的，可以解析里面的代码。
    如果不配置，则所有数据都会被当作字符串返回，而不会解析里面的html语法。
    from django.utils.safestring imort mark_safe
6. 创建register变量，注意名称固定的，不能随便写。实例化template
    register=template.Library()
7. 装饰需要的函数
    @regisger.simple_tag
8. 写函数主体,注意返回时要mark_safe来返回
    def filter_all(arg1,arg2):
        ...
        ret=xxx
        return mark_safe(ret)
9. html中调用
    注意在html中，变量的引用使用{{ }},函数的调用使用{% %}
    先载入模块
    {% locad filter %}
    再调用里面的函数
    {% filter_all a1 a2 %}

models里面内存外键
class Article(models.Model):
        ....
        type_choice=(
        (1,'python'),
        (2,'openstack'),
        (3,'docker'),
        (4,'go'),
    )
    article_type_id=models.IntegerField(choices=type_choice,default=1)
通过上面的语句，将article_type_id与type_choice建立了关联关系，就跟外键类似的效果。
注意：type_choice只是存在于内存之中，一般是不修改的，如果要修改就得改models函数，所以只有静态的数据一般才用这种方式。这个type_choice在数据库里面是不存在的。
通过 result=models.Article.objects.filter({'category_id': 2, 'article_type_id': 1})

流程：
先得到type_choice对象
articletype=models.Article.type_choice
循环type_choice对象,得到一个个元组，如（1，'python')。i[0]拿到第一个1，i[1]拿到Python.
for i in articletype:
    n1 = i[0]
    n4 = i[1]
将拿到的n4数据显示在前端，实现前端标签显示python
n1作为<a>标签里面的参数传递。出现在浏览器的get请求链接中 如：article-2-1.html
通过article-2-1.html得到的2和1(其中1就是从type_choice中得来)，将category=2,将article_type_id=1，这时候就建立了article_type_id与type_choice[0]的关联
通过联合查询得到category=2,article_type_id=1的组合查询得到同时符合两个搜索条件的结果。models.Article.objects.filter({'category_id': 2, 'article_type_id': 1})

requests请求
    首先导入requests模块，这个模块默认没有，需要pip3 install requests
    import requests
    def req(request):
        # 通过下面的方式来发送请求，并获取返回的数据到response
        response = requests.get('http://weatherapi.market.xiaomi.com/wtr-v2/weather?cityId=101121301')
        # 注意传过来的是字节，我们需要将其用utf-8编码一下，不然传到前端的中文就是乱码的
        response.encoding='utf-8'
        # 通过response.text获取返回的文本
        print(response.text)
        # 传递给前端页面
        return render(request,'req.html',{'result':response.text})


JSONP
    jsonp是一种请求方式，能够在不同的代码接口之间相互传递数据。

    默认使用ajax请求其他域名时，无法获取返回的数据，浏览器会报错。
            xhr=new XMLHttpRequest();
            xhr.open('GET','http://weatherapi.market.xiaomi.com/wtr-v2/weather?cityId=101121301');
            xhr.send();
            console.log('1',xhr.responseText);
    得到数据为空，提示如下错误。代表浏览器默认不允许ajax跨域请求数据。
    Failed to load http://weatherapi.market.xiaomi.com/wtr-v2/weather?cityId=101121301: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://127.0.0.1:8000' is therefore not allowed access.
    由于浏览器具有上面的同源策略，阻止ajax请求其他域名返回数据。但无法阻止<script src='xxx'></script>。所以可以利用<script>标签来完成跨域请求，即JSONP的请求方式。

    利用JS原生的方式发送JSONP请求
        创建script标签
                var a=document.createElement("script");
        设置src要请求的地址
                a.src='http://weatherapi.market.xiaomi.com/wtr-v2/weather?cityId=101121301';
        将script脚本添加到head标签下面。
                document.head.appendChild(a);
        获取到返回的数据后，清除script标签
                document.head.removeChild(a);
        返回的数据必须是js格式，要能够被js解析。
            接口示例函数：
            获取get请求里面的callback参数的值，然后把这个值返回过去。
                def jsonp(request):
                    func = request.GET.get('callback')
                    content= '%s(data)'%(func)
                    return HttpResponse(content)


        一个完整的原生JSONP请求函数
        1.这里只能是get请求，因为后台函数是通过get获取到参数的值。
        2.url里面要有callback参数名，这个是业界共识，基本都用这个名称。接口后台拿到这个参数的值list，并返回list(data)
        3.下面要写一个对应的list函数。这个函数名称要和接口返回的list(data)名称一样。一般接口返回的名称就是我们callback=list定义的list名称。如callback=fun,那么下面就要有个fun()函数。
            function getcontent() {
                var a=document.createElement("script");
                a.src='http://www.jxntv.cn/data/jmd-jxtv2.html?callback=list&_=1454376870403';
                document.head.appendChild(a);
                document.head.removeChild(a);
            }
            function list(arg) {
                console.log(arg);
            }

            接口示例函数：
            获取get请求里面callback参数的值，并将这个值作为函数名称返回过去。
                def jsonp(request):
                    func = request.GET.get('callback')
                    content= '%s(data)'%(func)
                    return HttpResponse(content)

    利用jquery来发送JSONP请求
        {# 通过jquery的方式实现jsonp跨域请求，实际上jquery也是执行的上面的getcontent里面的操作，只是jquery封装了而已 #}
        function jqgetcontent() {
            $.ajax({
                url:'http://www.jxntv.cn/data/jmd-jxtv2.html?',     //url后面不用再写callback=list这个参数，会自动加上对应的get参数
                type:'GET',     //这里不管是写的get还是post，实际上都会被jquery转换为get请求
                dataType:'JSONP',       //数据类型JSONP
                jsonp:'callback',       //参数名称
                jsonpCallback:'list',   //回调函数的名称，和上面的加起来就是 callback=list
            })
        }

    利用CORS规则允许跨域请求（需要在被跨站的服务器端设置）
         默认情况下，ajax是不能跨站请求的，但是我们可以在被跨站访问的服务器上设置响应头来允许跨站请求。
         流程
         浏览器---》A站点---》A站点返回JS代码跨站请求B站点--》B站点返回数据，并携带响应头：Access-Control-Allow-Origin:A站点的URL--》浏览器发现B站点允许A站点跨站
         --》浏览器顺利拿到B站点的数据。
         所以，这个需要在B站点的服务器上设置响应头。

         from django.utils.deprecation import MiddlewareMixin
         在B站点设置中间件，这样所有的请求都会带上这个中间件的响应头
           settins.xml中
             MIDDLEWARE = [
                ....
                'Middle.cors.cors',
                ]
           Middle文件夹中添加cors.py文件，写上下面的设置响应头的函数
            class cors(MiddlewareMixin):
                '''CORS中间件，允许来自http://127.0.0.1:8000的跨域请求，加上这个中间件后，
                服务器响应数据时，会在Response Hearders里面加上响应头：Access-Control-Allow-Origin:http://127.0.0.1:8000
                浏览器在接受到这个响应头之后，就会允许页面接受跨域请求的数据
                与week25里面的跨域请求结合测试使用
                '''
                def process_response(self,request,response):
                    print(request)
                    response['Access-Control-Allow-Origin']='http://127.0.0.1:8000'     //允许来自URL 127.0.0.1:8000的跨站请求
                    return response
          A站点请求
            当B站点允许A的跨站后，A站点就用普通的ajax就能实现跨站了
              function getContent() {
                xhr=new XMLHttpRequest();
                xhr.open('GET','http://127.0.0.1:8001/index/');
                xhr.send();
                {#这里默认是获取不到数据的，因为浏览器拦截了。要想能够通过，需要再被调用的api接口服务器上设置Access-Control-Allow-Origin响应头，#}
                {# 告诉浏览器，我这个网站允许从别的url请求并返回数据，和week22结合测试，week22已经开启了允许跨域，所以能够或拿到跨域返回的数据#}
                console.log('1',xhr.responseText);
                xhr.onreadystatechange=function () {
                    console.log('2',xhr.responseText);
                    if ( xhr.readyState == 3 ){
                        alert(xhr.responseText);
                    };
                }
            }

迭代器循环删除问题
        python3里面，dic.items  dic.keys生成的都是迭代器，而迭代器是不允许在循环的时候删除的。可以将其转换为list列表，然后在循环中删除。

        dic={'k1':'v1','k2':'v2'}
        for k in  dic.keys():
            if k == 'k2':
                '''下面的删除会报错RuntimeError: dictionary changed size during iteration,因为在字典的迭代过程中，
                如果删除其中的值，会导致迭代器的中迭代次数改变，这个是不支持的
                '''
                del dic[k]

        将上面的改为下面的List形式再执行就可以了
        for k in  list(dic.keys()):
            if k == 'k2':
                del dic[k]

博客系统讲解
    KindEditor
        - html标签过滤
        beautifulsoup4对标签进行过滤，防范非法字符的xss攻击

        - 单例模式
        在创建对象时，如果每个对象里面封装的值都是一样的，那么就适用于弄成单例模式，都调用同一个内存空间就行了。便于节省内存空间
        就比如我们的xss过滤，里面的过滤条件所有的都是一样的，
            class foo2(object):
            instance=None
            def __init__(self):
                print('init')
                self.name='alex'

            '''在创建对象时，首先会先执行new方法，再执行init'''
            def __new__(cls, *args, **kwargs):
                print('new')
                if foo2.instance:
                    return foo2.instance
                else:
                    # object.__new__(cls,*args,**kwargs) == foo2().
                    foo2.instance=object.__new__(cls,*args,**kwargs)
                    return foo2.instance
            创建obj/obj2，会发现最终的内存id都是一样的，就是只开辟了一块内存空间。
            obj=foo2()
            obj2=foo2()
            print(id(obj),id(obj2))


        回复评论
            # 1 楼下sb 程毅强 11         None
            # 2 是的 马良    11          None
            # 3 说的太对了 yanhang    11  1
            # 4 2楼是sb   程毅强 11      None
            # 5 你说的都对   程毅强 11      4
            class Comment(models.Model):
            """
            评论表
            """
            nid = models.BigAutoField(primary_key=True)
            content = models.CharField(verbose_name='评论内容', max_length=255)
            create_time = models.DateTimeField(verbose_name='创建时间', auto_now_add=True)
            #这里建立了to='self'代表和自己这个表进行关联。回复评论时，可以针对具体的评论进行回复，这时候需要关联到本表已经生成的回复帖子的id。和帖子id进行关联。
            reply = models.ForeignKey(verbose_name='回复评论', to='self', related_name='back', null=True)
            article = models.ForeignKey(verbose_name='评论文章', to='Article', to_field='nid')
            user = models.ForeignKey(verbose_name='评论者', to='UserInfo', to_field='nid')

    事务操作
        from django.db import transaction
        with transaction.atomic():      实现事务操作，缩进里面的多个sql语句为一个事务，只要有一条语句失败，那么所有操作都回滚
                tags = form.cleaned_data.pop('tags')
                content = form.cleaned_data.pop('content')
                print(content)
                content = XSSFilter().process(content)
                form.cleaned_data['blog_id'] = request.session['user_info']['blog__nid']
                obj = models.Article.objects.create(**form.cleaned_data)
                models.ArticleDetail.objects.create(content=content, article=obj)
                tag_list = []
                for tag_id in tags:
                    tag_id = int(tag_id)
                    tag_list.append(models.Article2Tag(article_id=obj.nid, tag_id=tag_id))
                models.Article2Tag.objects.bulk_create(tag_list)
    根据年月对文章进行分类
         # date_format(create_time,"%Y-%m")
        date_list = models.Article.objects.raw(
        #下面语句将创建事件格式化为年-月的格式了。group by也时根据年月来统计。strftime时sqllite的格式化语句，在mysql中用data_format格式化。
            'select nid, count(nid) as num,strftime("%Y-%m",create_time) as ctime from repository_article group by strftime("%Y-%m",create_time)')

        for item in date_list:
        #由于上面我们用了as别名，所以这里可以直接用别名来取值。如item.num
            print(item.nid,item.num,item.ctime)

    筛选条件
        利用数据库内置函数来实现筛选
            article_list = models.Article.objects.filter(blog=blog).extra(
            where=['strftime("%%Y-%%m",create_time)=%s'], params=[val, ]).all()
            #上面的语句相当于 select * from article where strftime("%Y-%m",create_time)=2017-02


作业
    评论和点赞
    评论：
    1.给那篇文章评论（与文章id关联）
    2.是否时回复别人的评论（NULL代表不是回复别人的评论，回复别人的评论那就是别人的评论的id)
    3.谁发表的评论
    点赞：
    1.给哪篇文章点赞
    2.是否点过赞，点过就不让再点（点赞状态）
    3.总点赞数加1

cmdb主机管理系统
    1.资产自动收集
    2.API接口
    3.可视化管理

    1.资产自动收集
        - 基于parmiko/ansible/fabric
          通过api获取主机名，利用parmiko链接到目标服务器获取数据，将获取的数据解析成字典，返回给api，api在处理后写入数据库
          优点：无依赖 不用安装客户端
          缺点：慢 （基于ssh实现）
          适用：机器不多时如200台以下
        - 基于saltstack
          通过api获取主机名，利用salt api链接到目标服务器获取数据，将获取的数据解析成字典，返回给api，api在处理后写入数据库
          优点：无依赖
          缺点：有点慢 （基于消息队列实现）
        - puppet

        - agent
           优点：快
           缺点：要装agent
           import subprocess    导入模块
           dir(subprocess)   查看subprocess支持的方法
           v = subprocess.getoutput('hostname')    执行本地shell命令并返回执行的结果
           k,v = subprocess.getstatusoutput('ipconfig')  执行本地命令并返回状态码和执行结果

定义一个基类，所有类都继承这个基类，这样其他类返回数据就都可以通过一样的方式来返回了
        class BaseResponse(object):
            def __init__(self):
                self.status = False
                self.message = ''
                self.data = None

            # ret = {'status': '','mssage': ''}
            # ret['status']
            # response = BaseResponse()
            # response.status = True
            # 对实例执行__dict__获取到的是init里面的属性的值，返回字典
            # response.__dict__

        在类里面定义这个执行函数，类里面其他方法都调用它。这样的好处在于，这个exec_shell_cmd里面可以很方便的更换具体的执行方法，
        比如都要执行shell命令，就用subprocess。如果要执行salt命令，这个类里面就写成salt的方式。
        基类里面写了这个方法，那么子类里面都可以用这个方法。
        def exec_shell_cmd(self, cmd):
            # private_key_path = config.configration['key_path']
            # key = paramiko.RSAKey.from_private_key_file(private_key_path)
            # ssh = paramiko.SSHClient()
            # ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            # ssh.connect(hostname=self.hostname, port=self.port, username=self.username, pkey=key)
            # stdin,stdout,stderr = ssh.exec_command(cmd)
            # result = stdout.read()
            # ssh.close()
            import subprocess
            status, output = subprocess.getstatusoutput(cmd)
            return output

        调用上面的方法执行shell命令
        def os_hostname(self):
            output = self.exec_shell_cmd('hostname')
            return output.strip()

            def exec_shell_cmd(self, cmd):
        # private_key_path = config.configration['key_path']
        # key = paramiko.RSAKey.from_private_key_file(private_key_path)
        # ssh = paramiko.SSHClient()
        # ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        # ssh.connect(hostname=self.hostname, port=self.port, username=self.username, pkey=key)
        # stdin,stdout,stderr = ssh.exec_command(cmd)
        # result = stdout.read()
        # ssh.close()
        import subprocess
        status, output = subprocess.getstatusoutput(cmd)
        return output

下面函数 让所有子类都能执行shell方法。
1.定义基类BasePlugin，
class BasePlugin(object):
    def __init__(self):
        pass
    def execute(self):
        return self.linux()

    def exec_shell_cmd(self, cmd):
        import subprocess
        status, output = subprocess.getstatusoutput(cmd)
        return output
    def linux(self):
        raise Exception('You must implement Linux method.')

    def windows(self):
        raise Exception('You must implement Linux method.')

class NicPlugin(BasePlugin):
     def linux(self):
         self.exec_shell_cmd('cmd')

obj = NicPlugin()
obj.execute()
执行过程解析：
1.obj.excute()--->执行了NicPlugin里面父类BasePlugin里面的execute方法，该方法返回了self.linux()
2.这时候会先查找NicPlugin里面是否有self.linux()方法，如果有，则执行该方法。如果没有，则在父类里面查找linux()方法。父类里面的linux()方法抛出了异常，提示你需要在子类里面定义linux方法。
3.此时NicPlugin里面有linux()方法，所以执行它。执行父类里面的exec_shell_cmd('cmd')。
所以，只要子类里面写了linux()方法，并且调用了exec_shell_cmd，那么这个子类就可以用obj.execute()来执行任意shell命令。便于所有子类共用这个方法。