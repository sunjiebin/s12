1. js正则
    - 登录注册验证
    test - 判断输入的内容是否符合正则

            rep = /\d+/;   正则两个//,一个开始一个结尾
            只要有数字,就匹配true
            rep=/\d+/;
            rep.test("dfkj");
        false
        rep.test("dfkj333333333");
        true
            从开头到结尾都是数字
            rep=/^\d+$/;
            rep.test("dfkj333333333");
        false
            rep.test("3234");
        true

    exec - 获取匹配的数据
        rep=/\d+/;
        str='sun123_jie_22';
        rep.exec(str)
        ["123"]
    \b开头和结尾表示获取单词,既匹配有前后空格的. sun\w+ 表示以sun开始到结尾
        rep=/\bsun\w+\b/
        str='sun123 sunjie333 jie1222,slkj3lkj'
        rep.exec(str)
        ["sun123"]
    (\w+)表示对匹配分组,会匹配到sun123,以及sun后面的部分123单独匹配出来
        rep=/\bsun(\w+)\b/
        /\bsun(\w+)\b/
        rep.exec(str)
        ["sun123", "123"]
    /g结尾表示全局匹配,会循环获取文本里面匹配到的字符. /结尾的只会匹配到第一个符合的结果
        rep=/\bsun(\w+)\b/g
        /\bsun(\w+)\b/g
        第一次匹配到第一个
        rep.exec(str)
        ["sun123", "123"]
        再执行就匹配到第二个
        rep.exec(str)
        ["sunjie333", "jie333"]
        rep.exec(str)
        null
        反复执行就会不停轮转,又从第一个开始
        rep.exec(str)
        ["sun123", "123"]

     /..../i不区分大小写
     /..../n 多行匹配,/g就是多行匹配了,加上/n是为了区分^开头
     注意多行匹配的区别
     其实默认/g就是一个多行匹配,如下文本 \n换行了,第二行的内容依然可以匹配到
         str='sun123 \nsunjie jie,sunsun'
        "sun123
        sunjie jie,sunsun"
        rep=/\bsun\w*\b/g
        /\bsun\w*\b/g
        rep.exec(str)
        ["sun123"]
        rep.exec(str)
        ["sunjie"]
     但是如果我们要匹配以sun开头的文字,那么这个正则就只能匹配到第一行的sun123了.
     如下正则,^sun表示要以sun开头,结果就只能匹配第一样的sun.这个和shell里面的理解是不一样的.
     因为在js的正则里面,默认会将真个字符串包括换行符看作一个整体,那么第二行的sun实际就不是开头了
         rep=/\b^sun\w*\b/g
        /\b^sun\w*\b/g
        rep.exec(str)
        ["sun123"]
        rep.exec(str)
        null
    要实现匹配每行sun开头的,就需要加上/m就行了
        rep=/\b^sun\w*\b/gm
        /\b^sun\w*\b/gm
        rep.exec(str)
        ["sun123"]
        匹配到了第二行的sunjie
        rep.exec(str)
        ["sunjie"]
        rep.exec(str)
        null
    03 表单验证
    <form>
        <input type='password'/>
        <input type='submit'/>
    </form>
    $(':submit').click(function(){
        $(':text,:password').each(function(){
            xxx;
            return false;
        })
        return false;
    })


2. 组件
bootstrap   最全的web框架，可用于前端页面，也可以用于后台管理
    - css
    - js
    学习bootstrap规则
    一、响应式
        @media
    二、图标、字体
        @font-face  用于查找自定义的字体，bootstrap中用于自定义的图标的定位
    三、基本使用

jQueryUI    用于后台管理
    - css
    - js
    学习jqueryui规则
EasyUI   主要用于后台管理页面的布局
    - css
    - js


3. WEB框架
    Model       View    Controller
    数据库操作   模板文件    业务处理
    即MVC框架，相当于对文件夹分类
    Model       Template    View
    数据库操作   模板文件      业务处理
    即MTV框架

4. Django
   安装django    pip3 install Django
   设置环境变量   python安装路径\Scripts
   创建django项目 django-admin startproject mysite
   会创建一个mysite的django项目
   也可以用pycharm来创建django项目。file-->new project-->django
   mysite
    - mysite        对整个程序进行配置
        - init
        - settings  配置文件
        - url       url和函数及类的对应关系
        - wsgi      遵循WSGI规范，以后线上一般用uwsgi+nginx
    - manage.py     管理Django程序
        - python manage.py
        - python manage.py startapp xx
        - python manage.py makemigration
        - python manage.py migrate
   运行django： python manage.py runserver 127.0.0.1:8000
   注意运行时的python命令要和django的python版本要一致，python3的django要用python3来运行。否则可能会有问题。

    创建app
    python manage.py satrtapp cmdb   创建一个名为cmdb的app,会在对应的django项目下面生成一个目录
    注意：创建对应的app之前，先不要在settings.py的INSTALLED_APPS里面添加该应用名称，否则启动会报错，提示：
    ModuleNotFoundError: No module named 'cmdb'
    正确的步骤是先创建app，再到settings.py里面填上新增的app名称。顺序不能反


    app目录:
        我们用python的orm时,无法对已有的表进行加列修改列的操作.但django可以.
        migrations 记录数据库修改表结构的记录.
        每个目录下都有一个__init__.py,这个文件在python3里面其实不需要也行,但是在python2里面就必须要加上,否则在我们用
        from migrations import xxx 时,Python2就会无法识别xxx而报错,python3里面不会.  加上__init__.py后,相当于这是一个
        python package,也就是一个python包,而不是一个普通的文件夹了.我们用pycharm时,就有新建文件夹和新建package,两者就
        是有没有这个__init__.py的区别.
        admin  django的后台管理
        apps   配置当前的app
        models  相当于ORM,写指定的类,通过命令可以创建数据库结构
        tests   单元测试
        views   业务代码,业务逻辑都写在这里,比如cmdb系统里面的主机管理,发布管理

    1. 配置模版路径
        在settings里面配置

        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                # DIRS里面就是配置模版路径,默认是templates
                'DIRS': [os.path.join(BASE_DIR, 'templates')]
                ,
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]
    2. 配置静态目录
        需要在settings文件底部加上,注意逗号一定要有,否则启动直接报错
        STATICFILES_DIRS = (
    os.path.join(BASE_DIR,'static'),
)
在temlates文件夹中的html文件通过Link引用样式即可.
    <link rel="stylesheet" href="/static/common.css"/>

    django的工作流程(生命周期)
    浏览器访问-->路由系统(urls.py)-->视图函数(views.py)-->读取数据库,结合网页模版(templates)渲染,渲染完毕后-->返回字符串给客户端

内容整理
        1. 创建django工程
            django-admin startproject xxx
        2. 创建app
            cd 工程名
            python manage.py startapp xxx
            在settings.py里面添加app名称(如果不在INSTALLED_APPS里面添加，那么在执行models.py初始化数据库时，就会无法生效，不会建表)
            INSTALLED_APPS = [
            .....
            'app01',]
        3. 静态文件
            在settings.py中设置
            STATICFILES_DIRS=(os.path.join(BASE_DIR,'static'),)
        4. 模版路径
            在settings.py中设置
            DIRS --> [os.path.join(BASE_DIR,'templates'),]
        5. settings中
            注释csrf
        6. 定义路由规则
            urls.py
                不带括号的函数名
                path('login',views.login),
        7. 定义视图函数
            app下的views.py
                注意request参数不能少
                获取数据
                def fun(request):
                    request.method 请求方式GET POST 都是大写
                    request.POST.get('xxx',None)  取用户post传来的值
                    request.GET.get('xxx',None)   取get传来的值  URL + ?uid=123&user=aaa
                 返回数据
                 return HttpResponse('字符串')
                 return render(request,"html模版路径",{'变量名':'变量值')     注意最后面写法是字典{a:b},不是集合{a,b}
                 return redirect('/只能填URL')   注意这里如果是跳转到本地,前面必须加/. 并且这里只能填url,不能填模版文件的路径.
        8. 模版渲染
                特殊的模版语言
                -- {{ 变量名 }}
                def fun(request):
                    return render(request,'index.html',{'current_user':'ales'})
                    <div>{{ current_user }}</div>
        for循环
                def func(request):
                    return render(request,'login.html',
                    {
                    'current_user':'alex',
                    'user_list':['alex','eric','sun'],
                    'user_dict':{'k1':'v1','k2':'v2',}
                    })
                for循环直接取值
                <ul>
                    {% for row in user_list %}
                        <li>{{ row }}</li>
                    {% endfor %}
                </ul>
                索引取值
                {{ row.0 }}     取列表里面的第一个值
                {{ row.1 }}     取列表里面的第二个值
                {{ row.k1 }}    取字典里面的k1的值
        if条件判断
                age = 18
                如果age为0,则if返回false
                {% if age %}
                    <a>年龄大于0</a>
                    注意age > 16 这个>前后都要有空格
                    {% if age > 16 %}
                        <a>青少年</a>
                    {% else %}
                        <a>成年人</a>
                    {% endif %}
                {%  else %}
                    <a>年龄为0</a>
                {%  endif %}