
一. 设计表结构
    1，贴子表

    2，评论表
        评论/回帖/点赞
    3，板块



class Article(models.Model):
    # 默认第一个字段就是verbose_name，如果不写，默认将用变量名称作为该名称,如title，那么django后台就会显示title
    title=models.CharField('文章标题',max_length=255)
    brief=models.CharField(null=True,blank=True,max_length=255,verbose_name='文章简介')

    models.CharField('文章标题',max_length=255) 和 models.CharField(verbose_name='文章标题',max_length=255) 是等价的
    这个注释不是存在数据库里面的，这个注释是给django后台用的，添加这个注释后，django后台就会显示这个名称，不添加默认就显示列名。
    注意: 在python2里面，如果写中文注释，前面要加个u。在python3里面不用写u，Python2写法如下
    title=models.CharField(u'文章标题',max_length=255)
    注意对于外键/多对多等，不能用('文章标题',)这种写法，因为这一类字段第一个参数必须是一个关联的表对象，所以不能写注释。

#引用django自带的用户
from django.contrib.auth.models import User

注意：
blank=True和null=True的区别：
blank=True表示用户可以不填写这个字段，用于用户输入校验。如果有唯一约束，两个blank为空的列会存储空字符串，会违反唯一性约束的。而两个null不会违反约束。
null=True表示允许数据库存储空字段，用于数据库的存储，不作用户校验
一般两个一起用，表示这个字段允许为空
head_img=models.ImageField(height_field=150,width_field=150,blank=True,null=True)


auto_now_add表示只在第一次创建的时候更新时间，auto_now表示每次修改数据都会更新时间。
    pub_date=models.DateTimeField(auto_now_add=True)
    last_modify=models.DateTimeField(auto_now=True)

创建django后台管理员用户
    python manage.py createsuperuser

修改settings.py文件，修改后台语言和时区
注意中文是zh-hans，写错了会导致无法启动。
    LANGUAGE_CODE = 'zh-hans'
    TIME_ZONE = 'Asia/Shanghai'

要用后台管理数据表，需要做两步
1.在admin.py中创建类
class ArticleAdmin(admin.ModelAdmin):
    '''list_display用于定义在后台显示的列'''
    list_display = ('title','category','author','pub_date','last_modify','status')

2.注册类
admin.site.register(models.Article,ArticleAdmin)

要在后台显示具体的文字，而不是对象信息就要写上这个函数。
__str__函数用于设置这个类的返回值，默认返回的是这个对象，定义这个函数后，返回的就是这里面写的值。
在python2里面，用__unicode__
        def __unicode__(self):
        return self.title
在python3里面，要用__str__,上面的unicode没用了。。
    '''定义str函数，这样在django后台的外键下拉框里面就会显示对应的name的值，而不是返回一个object的对象'''
    def __str__(self):
        return self.name


clean方法用于在后台django校验，当写了这个方法后，插入表数据时会先执行这个方法来校验。校验通过后，才能插入数据。
下面的方法要求我们在帖子评论为空时，在admin后台会返回一个“评论不能为空”的错误。
    def clean(self):
         #这里用 self.comment == is None是错误的，当我们没有写评论时提交到后台的值应该是''，而不是None。所以要用len来判断长度才对
        if self.comment_type==1 and len(self.comment)==0:
            raise ValidationError('评论不能为空')
django 认证
    导入认证模块
    from django.contrib.auth import login,logout,authenticate
    authenticate用于数据库验证，会根据post提交的username,password来去数据库查，
    如果匹配则返回user对象（如果我们在models的类里面定义了__str__，则返回str函数定义的值），不匹配则返回空
    这里的get('username'),get('password')就是django后台表auth_user里面的列名
        user = authenticate(username=request.POST.get('username'),password=request.POST.get('password'))
    login用于登录，根据前面验证成功的user对象以及request对象，来生成对应URL对应用户的session.实现登录。
        login(request,user)
    logout用于退出登录
        logout(request)

    is_authenticated() 判断是否认证成功
        在views视图验证
            def my_view(request):
                if not request.user.is_authenticated():
                return redirect('%s?next=%s' % (settings.LOGIN_URL, request.path))
        在前端html里面验证
            {% if request.user.is_authenticated %}

    在前端通过django自带的user表关联查询到userprofile表里面的name字段
    如果要通过user反查到userprofile表，首先在models里面定义userprofile表时，要添加OneToOneField字段，将user表与之一对一的关联。
    models.py
        user = models.OneToOneField(User,on_delete=models.CASCADE)
    这里一定要注意，页面里面通过user反向查找时，userprofile一定要小写，不是models里面定义的UserProfile。如果写models里面的类名称会查不出数据
        {{ request.user.userprofile.name }}

    登录校验装饰器，装饰一个函数或者类，这个函数就得在登录校验通过后才能访问，如果未登录，会跳转到登录页面，默认是django后台登录页面/accounts/login/
        from django.contrib.auth.decorators import login_required
        对index添加登录校验的装饰器，那么这个index.html页面就得先登录才能访问
        @login_required
        def index(request):
            #提取文章分类标签，过滤出set_as_top_menu为True的数据，并且依照position_index来排序
            category_list=models.Category.objects.filter(set_as_top_menu=True).order_by('position_index')       #倒序(-'position_index')
            return render(request,'bbs/index.html',{'category_list':category_list})
        可以修改settings.py,添加下面的参数，让认证不通过时跳转到我们指定的/login/页面，而不是默认的/accounts/login/。
        LOGIN_URL = '/login/'

        登录的url可以在settings里面直接指定全局的，也可以在这里指定特定的url.
        比如login_url='/bbs/login'将会自动跳转到/bbs/login.
        如果不指定，那么就用settings里面设置的LOGIN_URL地址
        @login_required(login_url='/bbs/login')
        def new_article(request):
            xxx

前端页面设计
    在bootstrap上下载一个模板
    Bootstrap3中文文档-->起步-->实例精选-->bootstrap框架的基本用法 里面找打一个自己需要的模板  -->打开模板页面-->网页另存为。
    将里面的css文件全放到/statics/bootstrap-3.3.7-dist/css里面
    将里面的js文件放到/static/bootstrap-3.3.7-dist/js里面
    将首页放在templates目录下. 将首页命名为base.html，将里面的静态css/js路径替换为我们的路径
    在index.html中{% extends 'base.html' %}。 注意：就算base.html只是一个普通的页面，依然可以被extends引用。相当于index.html就是base.html

    注意我们在使用block时，位置不要搞错了。要么都在div里面，要么都在外面。不然样式会混乱
    {% block page-container %}
        <div class="jumbotron" deep="1">
            ....
        </div>
    {% endblock %}

    在前端页面通过外键反查数据
        comment表外键关联了article表。所以article表可以通过“关联表名_set"的方式反查关联表。
        select_related.count 反查与article该篇文章相关联的所有评论的总数（这里点赞也算在了里面）
        {{ article.comment_set.select_related.count }}
        如果我们建表时用的是OneToOneField,那么就不需要用__set，就像查询本表一样直接查询就行了。
        models
            class UserProfile(models.Model):
                user = models.OneToOneField(User,on_delete=models.CASCADE)
                friends=models.ManyToManyField('self',related_name='my_friends',blank=True,null=True)
        html
            注意这里的request.user不是UserProfile里面的user字段，而是django后台的user表。
            {% for friend in request.user.userprofile.friends.select_related %}

        html里面没法用filter去过滤输出,下面的写法在html里面是错误的！
        {{ article.comment_set.select_related.filter(comment_type=1).count }}       <--HTML模板并不支持这个写法

    views函数里面反查数据
        comment表里面设置了外键关联article表，那么我们可以通过article对象来反查comment里面的数据
        首先查询出id=article_id的文章对象artcile_obj，然后就可以利用这个对象来反查.
        注意filter（）得出来的是一个对象列表，而不是一个具体的对象。要得到对象，就得[0]
         article_obj=models.Article.objects.filter(id=article_id)[0]
         用get得到的就是单个的对象，但是用get时要注意返回的只能时一个值，要是查出来时多个值就会报错了。
          article_obj=models.Article.objects.get(id=article_id)
         comment_set中的comment代表comment表，_set代表对这个表反查。select_related()代表查询出于article_obj相关的comment表的数据
         article_obj.comment_set.select_related()
         注意：
            当定义的外键关联字段里面有related_name时，comment_set就会失效，取而代之的是里面的值my_comment
         例如：
         Models:
             class Comment(models.Model):
                article=models.ForeignKey(Article,on_delete=models.CASCADE,verbose_name='所属文章',related_name='my_comment')
         views:
            def get_comments(request,article_id):
                article_obj=models.Article.objects.filter(id=article_id)[0]
                comment_related=list(article_obj.my_comment.select_related())
         如果还是用article_obj.comment_set.select_related(),则会报错如下：
         AttributeError: 'Article' object has no attribute 'comment_set'

    filter过滤输出
        通过上面的方法可以查到所有与该篇文章相关联的评论总数，但是没法区分点赞和评论。可以用下面函数过滤的方法来实现。
        现定义一个filter函数
        @register.filter
        def filter_comment(article_obj):
            query_set=article_obj.comment_set.select_related()
            comments={
                'comment_count':query_set.filter(comment_type=1).count(),
                'thumb_count':query_set.filter(comment_type=2).count(),
            }
            return comments.get('comment_count')
        html模板中调用该filter函数，让函数去处理过滤信息，这样返回的就是评论的总数了（不包括点赞）
        {% load custom %}
        <span>{{ article|filter_comment }}</span>

    如何使用bootstrap里面的元素？
        参考：https://v3.bootcss.com/css/
        比如我们需要查看按钮的样式配置，可以直接参考上面的官档-->全局css样式-->右边的按钮，就看可以看到按钮的样式选择代码了
        比如如下就是一个绿色的成功按钮
        <button type="button" class="btn btn-success">（成功）Success</button>
        支持多行文本的表单控件。可根据需要改变 rows 属性。（全局css样式-->表单-->被支持的控件-->文本域)
        <textarea class="form-control" rows="3"></textarea>

csrc_tocken
        前端通过这个函数会生成一个input标签。{% csrf_token %}
        <input type="hidden" name="csrfmiddlewaretoken" value="ZZfqgmDjdIhHQw6iONzGcuYu5tsHVRfPeuEpICUdFZDeoiBOncqbakD0EGmZUamY">
        可以通过jquery获得这个input标签里面的value
        function getcsrf(){
            var csrftoken = $('input[name="csrfmiddlewaretoken"]').val();
            return csrftoken;
        }
        执行getcsrf()将返回csrftoken的值。
        在post中，转递这个csrf键值对给服务器即可通过验证。
        注意name名称csrfmiddlewaretoken不能错。
                      $.post(
                        "{% url 'post_comment' %}",
                        {
                            comment_type: 1,
                            article_id: '{{ article_obj.id }}',
                            parent_comment_id: parent_comment_id,
                            comment: comment_text.trim(),
                            csrfmiddlewaretoken: getcsrf(),
                        },
                        funciton(callback){
                        })

        上面的方法要在页面里面每一个post里面都加上csrfmiddlewaretoken: getcsrf()代码，如果post太多了很不方便。
        下面的方法是官方提供的自动给页面所有的ajax提交添加csrf认证的方法，这样页面里面的post就不用再加自动。
        因为在ajax调用时之前就已经加上了csrf验证了。
        参考：https://docs.djangoproject.com/en/2.1/ref/csrf/
        // start csrf
            function getCookie(name) {
                var cookieValue = null;
                if (document.cookie && document.cookie !== '') {
                    var cookies = document.cookie.split(';');
                    for (var i = 0; i < cookies.length; i++) {
                        var cookie = cookies[i].trim();
                        // Does this cookie string begin with the name we want?
                        if (cookie.substring(0, name.length + 1) === (name + '=')) {
                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                            break;
                        }
                    }
                }
                return cookieValue;
            }

            var csrftoken = getCookie('csrftoken');

            function csrfSafeMethod(method) {
                // these HTTP methods do not require CSRF protection
                return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
            }

            $.ajaxSetup({
                beforeSend: function (xhr, settings) {
                    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
                        xhr.setRequestHeader("X-CSRFToken", csrftoken);
                    }
                }
            });
        //end csrf

    跳转带上参数路径
        {{ request.path_info }} 获取当前页面的url路径
        后端函数可以通过get('next')获取到前端传过来的next=/xxx。next=/aaa.html在request.GET里面会成为一个字典{'next':'/aaa.html'}
     html:
        <a class="btn-link" href="{% url 'login' %}?next={{ request.path_info }}">登录</a>后再评论!</h4>
     views:
        backurl=request.GET.get('next')
        return HttpResponseRedirect(backurl or'/bbs')       # or用于当backurl为空时，则自动跳转到用/bbs

    前端登录校验
        request.user.is_authenticated 是django自带的用户校验工具，用于校验用户是否已经登录
        {% if request.user.is_authenticated %}
            <textarea class="form-control" rows="4"></textarea>
            <button class="btn btn-sm btn-primary pull-right" style="margin-top:10px;">评论</button>
        {% else %}
            <div class="jumbotron" style="text-align: center">
                <h4><a class="btn-link" href="{% url 'login' %}?next={{ request.path_info }}">登录</a>后再评论!</h4>
            </div>
        {% endif %}

    利用jquery的post提交数据
        提交数据可以用form/ajax/iframe等，还可以用$.post()的写法，比ajax写法更简洁
        $.post(
            "{% url 'post_comment' %}",
            {
                comment_type: 1,
                article_id: '{{ article_obj.id }}',
                parent_comment_id: null,
                comment: comment_text.trim(),
                csrfmiddlewaretoken: getcsrf(),
            },
            function (callback) {
                console.log(callback);
            }
        )

    url灵活写法
        在html不将url写死，这样以后在别的地方移植，或者我们需要更改url路径时，就不用再修改静态页面里面的url了。这么写通用性更高，更灵活，便于移植。
        首先在urls.py里面写path时，加上name参数，如
            path('login/',views.acc_login,name='login'),
        然后在html页面里面通过url来直接调用， 其中的'login'就是对应上面urls.py里面的name的值。{% url 'login' %}  -->等价于 login/
            {% url 'login' %}
            <h4><a class="btn-link" href="{% url 'login' %}?next={{ request.path_info }}">登录</a>后再评论!</h4>
        article_obj.id=1时，下面的url等价于/get_comments/1
            re_path('get_comments/(\d+)',views.get_comments,name='get_comments'),
            {% url 'get_comments' article_obj.id %}

        static静态路径也可以这么写  static的路径是在settings.py里面定义好了的路径。
            在html中：
            {% load  custom static %}
            {% truncate_url article_obj.head_img.url as imgpath %}
            <img class="article-detail-head-img" src="{% static imgpath %}"/>
    样式相关
        当我们定义了float，让div飘起来后，需要在其后定义一个clear来清除浮动，否则其后的标签都会跑到上面去，因为前面的标签浮起来了。
        同时，div最外层的样式也才能撑起来，否则外面的div无法撑开。
        <div class="clear-both"></div>

        role标签是用来给阅读障碍的人用的，提供给辅助阅读工具来识别标签。
             <div role="checkbox" aria-checked="checked"></div>
            辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。

        标签页，点击不同标签，下面列表页跳到不同的div
        data-toggle="tab" 加上这个属性后，就能实现将相关联的标签切换了。
            <ul class="nav nav-pills">
                <li role="presentation" class="active"><a href="#contact-tab" data-toggle="tab">好友</a></li>
                <li role="presentation"><a href="#group-tab" data-toggle="tab">群主</a></li>
            </ul>
            <div class="tab-content">
                <div role="tabpanel" class="tab-pane active" id="contact-tab">contact</div>
                <div role="tabpanel" class="tab-pane" id="group-tab">group</div>
            </div>

    注意.val()和.text()的区别
        val()是获取标签对象里面的内容.如果标签里面有value='aaa'，则可以获取到aaa.如果时textarea文本框，可以获取到文本框输入的内容。
        text()是获取标签之间的文本内容，而不是对象里面的内容。比如<a>xxx</a>将获取到xxx。。
        所以当我们在下面的文本框输入内容时，内容是写在textarea对象里面的，而不是写在<textarea></textarea>两个标签之间的，所以text是获取不到的。
         <textarea class="form-control" rows="4"></textarea>
        $('.form-control').val()   这个是获取文本里面输入的内容
        $('.form-control').text()  这是获取不到的
        对于下面的span标签,text才能获取到“小罗”，val()获取不到值
        <span class="contact-name">小罗</span>
    几个js方法的用法
        delegate()
        delegate() 方法为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数
        如下代码为body页面里面的textarea文本框添加事件处理程序。附加到textarea元素的事件为keydown，当keydown事件发生时，执行function函数。
        $('body').delegate('textarea', 'keydown', function (e) {xxx}
        keydown/keyup
        keydown 当键盘被按下的时候，就会触发keydown事件。keyup 当按键松开的时候，就会触发Keyup事件
        keydown一般和which一起使用
        which
        which 属性指示按了哪个键或按钮。和keydown一起，就能够做到按下指定的键就触发事件。
        每个按键都有一个编号，用which就能够获得对应的按键的编号。比如Enter键的编号就是13.

        看下面的示例：
        在body里面对textarea绑定keydown按键事件，当按下enter(3.which==13)键时，触发下面的函数。
        $('body').delegate('textarea', 'keydown', function (e) {
            //console.log(e.which);
            if (e.which == 13) {
                var msg_text = $('textarea').val();
                if ($.trim(msg_text).length > 0) {
                    console.log(msg_text);

                }
                AddSentMsgIntoBox(msg_text);
                $('textarea').val('');
            }
        });

        animate用于动态改变元素，让元素动起来。可用于制作动画
        scrollTop 设置偏移值,定位到坐标位置
        scrollHeight获取高度
        看示例：
        下面的示例找到chat-box-window的元素，然后通过scorllHeight获取到元素的高度。获取到高度后，通过scrollTop定位到获取的高度。
        再通过animate将这个过程变成动画，实时的定位到最新的高度。实现页面上实时显示聊天框最下面的新消息
            $('.chat-box-window').animate({
                scrollTop: $('.chat-box-window')[0].scrollHeight
            }, 500)

django静态页面STATIC_URL
    定义URL映射
    STATIC_URL = '/static/'

    STATIC_ROOT 是在部署的时候才发挥作用,执行 python managy.py collectstatic ，会在工程文件下生成(STATIC_ROOT )文件夹，把各个app下的静态文件收集到这个目录下。
   利于前后端分离，比如将静态资源交给Nginx。这个参数默认没有
    STATIC_ROOT = os.path.join(BASE_DIR, 'collect_static')

    STATICFILES_DIRS 定义静态文件的目录，可以同时定义多个静态文件夹
    静态文件的一般安放位置有两种:
    (1).一种就是在每个app里面新建一个static文件夹，将静态文件放到里面，在加载静态文件时，比如要在模板中用到静态文件，django会自动在每个app里面搜索static文件夹(所以，不要把文件夹的名字写错， 否则django就找不到你的文件夹)。
    (2).另一种,就是在所有的app文件外面，建立一个公共的文件夹,，也就是我们的STATICFILES_DIRS。因为有些静态文件不是某个app独有的,那么就可以把它放到一个公共文件夹里面，方便管理(注意，建立一个公共的静态文件的文件夹只是一种易于管理的做法，但是不是必须的，app是可以跨app应用静态文件的，因为最后所有的静态文件都会在STATIC_ROOT里面存在) 
    那现在的问题是如何让django知道你把一些静态文件放到app以外的公共文件夹中呢，那就需要配置STATICFILES_DIRS了

    在static标签中引用文件时有两个查找路径：1、app下的static。2、工程下的commen_static（STATICFILES_DIRS） 。
    STATICFILES_DIRS告诉django,首先到STATICFILES_DIRS里面寻找静态文件,其次再到各个app的static文件夹里面找
    注意，django查找静态文件是惰性查找，查找到第一个，就停止查找了,所以，如果在STATICFILES_DIRS里面和app的static里面有同名文件，那么会取STATICFILES_DIRS下的文件。

    可以同时定义多个目录，如果有同名文件，依照惰性查找规则，找到第一个就不管后面是否还有同名的文件了
    STATICFILES_DIRS=(
        os.path.join(BASE_DIR,'static'),
        os.path.join(BASE_DIR,'uploads'),
    )

    可以在html里面用变量替代静态页路径，这样便于我们页面的移植，其他人用我们的代码就不用修改静态url路径
    首先在html最上面load载入static模块
    {% load static %}
    动态的获取我们的图片地址，这里用了truncate_url来处理了图片的url。 as imgpath 代表将处理的结果赋值给变量imgpath
    {% truncate_url article.head_img.url as imgpath %}
    static是内置静态url函数，会返回setting.xml里面STATIC_URL定义的值。 imgpath是我们上面定义的变量，也就是函数处理过的图片路径。两者相加得到最终路径
    <img src="{% static imgpath %}"/>
    比如
    imgpath='img/aa.jpg'
    STATIC_URL = '/static/'
    那么
    <img src="{% static imgpath %}"/>  --> 将得到 /static/img/aa.jpg


views
    定义返回url，自动跳回原来的url
        当url=http://127.0.0.1:8000/login/?next=/bbs/detail/1
        request.GET.get()将获得一个queryset的值，结果{'next':'/bbs/detail/1'},所以 request.GET.get('next') = ‘/bbs/detail/1’

        HttpResponseRedirect(backurl or'/bbs')  返回值可以写or，当backurl为空时，就执行后面的/bbs。
        所以，当我们直接访问登录url时，url=http://127.0.0.1:8000/login/, 这时候GET后面为空，就会跳转到http://127.0.0.1:8000/bbs/
        当我们从帖子页面过来时，url=http://127.0.0.1:8000/login/?next=/bbs/detail/1, 就会跳到http://127.0.0.1:8000/bbs/detail/1
            backurl=request.GET.get('next')
            return HttpResponseRedirect(backurl or'/bbs')

    注意：当我返回的本身就是一个html时，是不需要json.dumps的，因为html本来就是前端语言，能被前端解析，用json.dumps一般用在将python格式的
    字典等数据传给前端时，前端不认python格式的数据，这时候才用到json.dumps将其转换为字符串。
    如果用了json.dumps传给前端，那么前端必须要用JSON.parse()来解析出来，将其转换为前端的html对象。
    否则，当我们传递给前端的html中有中文时，前端中文显示就会变成 \u5f53\u7136OK\u4e86\uff01。
    因为json.dumps默认对中文用的ascii码，所以中文显示出来会是十六进制的ASCII码。可以用json.dumps(comment_tree,ensure_ascii=False)来让
    中文正确显示。
    错误示例：
    views函数
             return HttpResponse(json.dumps(comment_tree))
        传递值在views里面print显示为 <span style='margin-left:10px'>建立就立刻</span>

    js接收
                function (callback) {
                    console.log(callback);

                    {#callback = decodeURIComponent(callback);#}
                    $('.comment-list').html(callback);
                }
         console.log和前端打印出来的结果为：<span style='margin-left:10px'>\u5efa\u7acb\u5c31\u7acb\u523b</span>

    正确示例
        views
            return HttpResponse(json.dumps(comment_tree))
        js
            $('.comment-list').html(JSON.parse(callback));
    或者
        views
            return HttpResponse(comment_tree)
        js
            $('.comment-list').html(callback));
    或者
        views
            return HttpResponse(json.dumps(comment_tree,ensure_ascii=False))
        js
            $('.comment-list').html(callback));

    此时前端和后台的中文都会正确显示: <span style='margin-left:10px'>建立就立刻</span>

    当我们get数据时，如果为None会报错，可以写的时候后面加上or None就行了。如果有数据则得到数据，没有就时None.
    parent_comment_id=request.POST.get('parent_comment_id') or None,

    在发布评论后，一般最后发的评论应该放在最前面，所以需要倒序排列
    order_by()用于排序。列名如果有-号则代表倒序，没有就是正序
    以下为以id倒序排列
        comment_related=article_obj.comment_set.select_related().order_by('-id')

    回复评论绑定事件：
        给回复评论绑定事件，注意这个事件必须写在get_Comment的function里面。如果不写这里会出现事件无法绑定的情况，
        导致按钮点击没有反应，无法触发点击事件。
        这是因为js的函数时异步执行的，如果写在get_comment()函数外面，那么当get_Comment()都还没有执行完时，这个click
        函数就已经执行了，而此时评论都还没有获取到，自然就无法对这些评论绑定事件了。
        所以，必须先等评论加载完后，再绑定事件。那么为了保证执行顺序，就需要把这个click事件写道get_Comment()的function函数里面，
        确保评论已经加载完成后再执行这个绑定事件。
            function get_Comment() {
            $.get("{% url 'get_comments' article_obj.id %}",
                function (callback) {
                    {#console.log(callback);#}
                    $('.comment-list').html(callback);
                    // click事件必须写在这个里面
                    $('.click-comment').click(function () {
                        var id = $(this).attr('comment-id');
                        console.log(id);
                    })；
                }
            )
        }

js克隆绑定的事件
    默认clone()只会复制标签，而不会克隆事件的，导致标签绑定的事件失效，加上true就能够把事件一起克隆过来
    var comment_div=$(".comment-area").clone(true);
    $('.comment-area').remove();
    $(this).parent().append(comment_div);

jquery查找子元素是否存在
    查找comment-box下面是否有comment-area类，如果有，那么length返回的值就会大于0.没有就是0
    注意children和find的区别，children是查找当前元素下级，不会查找下下级，查找深度为1. find是遍历标签下面所有元素，会打破砂锅查到底。
    var len=$('.comment-box').children('.comment-area').length;
    if (len==0){console.log(len)}

jquery在指定元素前面插入数据
    下面代码会在comment-list前面插入克隆的new_comment_div
    var new_comment_div=$(".comment-area").clone(true);
    $('.comment-list').before(new_comment_div);

清空文本框里面的内容，用val('')。注意val()是获取评论框内容。
下面三种，都可以清空内容
    $('.comment-area').children('textarea').val('');
    $('.comment-area textarea').val('');
    清空克隆过来的标签的文本内容
     var new_comment_div=$(".comment-area").clone(true);
     new_comment_div.children('textarea').val('');

主评论框点击评论时被复制，导致多个评论框出现（视频中未出现这个bug，同样代码在我这里会出现）
解决办法
    添加if判断，判断评论框comment-box是否已经有comment-area，有的话就不添加
                var len=$('.comment-box').children('.comment-area').length;
                if (len==0){
                    var new_comment_div=$(".comment-area").clone(true);
                    new_comment_div.attr('id',1);
                    console.log(new_comment_div);
                  //  $('.comment-box').append(new_comment_div);
                    $('.comment-list').before(new_comment_div);

富文本编辑
    UEditor  百度的UEditor，功能齐全，适合国人，但是没有python版本，只有java/php/.net
    KindEditor  国内的
    CKEditor 国外的
    CKEditor 使用，下载完整版 https://download.cksource.com/CKEditor/CKEditor/CKEditor%204.12.1/ckeditor_4.12.1_full.zip
    在项目的static目录下建一个plugin,复制进去
    使用CKEditor：
    先建立一个form表单，里面生成一个textarea文本框，我这里的文本框用modelform自动生成了。可以在浏览器f12查看自动生成的textarea的id是什么。
        <form method="post" enctype="multipart/form-data">       <!--以当前页面提交就不用写action="/bbs/new_article/"-->
            {% csrf_token %}
            {{ article_form.as_ul }}
            <input type="submit" class="btn btn-sm btn-primary pull-right " value="提交"/>
        </form>
    加载ckeditor.js脚本
    <script src="/static/plugin/ckeditor/ckeditor.js"></script>
    使用CKEDITOR.replace替换id为id_content的文本框，就自动生成ckeditor的富文本框了。
    <script>
        // Replace the <textarea id="editor1"> with a CKEditor
        // instance, using default configuration.
        CKEDITOR.replace('id_content');
    </script>

ModelForm
    cleaned_data 就是读取表单返回的值，返回类型为字典dict型
    email=cleaned_data['email']  读取name为 ‘email’的表单提交值，并赋予 email变量

    article_form=ArticleModelForm(request.POST,request.FILES)
    article_form.cleaned_data  将会以字典的形式返回form表单里面提交的所有数据，key为列名，value为输入的值。

    注意：cleaned_data一定要在is_valid()后面出现，如果写在前面，那么就会报下面错，说没有这个属性
    AttributeError: 'ArticleModelForm' object has no attribute 'cleaned_data'

   对ModelForm生成的页面添加样式
   class ArticleModelForm(forms.ModelForm):
    class Meta:
        xxx

        def __init__(self,*args,**kwargs):
        super(ArticleModelForm,self).__init__(*args,**kwargs)
        # 如果只需要给某个字段单独加样式，可以用下面的写法
        # self.fields['title'].widget.attrs['class']='form-control'
        # 给所有字段统一加样式
        for filed_name in self.base_fields:
            filed = self.base_fields[filed_name]
            filed.widget.attrs.update({'class':'form-control'})

上传图片注意事项
    1. 如果是上传图片，必须用request.FILES接收，用request.POST是没法收到图片的。
        article_form=ArticleModelForm(request.POST,request.FILES)
    2. 然后from里面必须写上enctype="multipart/form-data"。
    3. 必须用POST提交才能上传，不能用GET。
        <form method="post" enctype="multipart/form-data" action="{% url 'file_upload' %}">
    4. 前端input框里面必须定义好name属性，这个后端拿到时会作为字典的Key。
        <input type="file" name="filename"/>
        file_obj=request.FILES.get('filename')
    以上四个条件必须同时满足才能上传成功。

       普通的上传
           views里面get的名称要与前端定义的name的名称一致
           html
             <input type="file" name="filename"/>
           views
             file_obj=request.FILES.get('filename')
             with open(f'uploads/{file_obj.name}','wb+') as destination:
                for chunk in file_obj.chunks():
                    destination.write(chunk)
             return render(request,'bbs/new_article.html')

       ModelForm上传
           如果是在ModelForm里面，那么用{{ article_form.as_ul }}会自动生成input页面，可以f12查看上传的input表单。
           如果在models的函数里面定义了ImageField这种字段，那么ModelForm会自动生成上传图片的表单。
            models:
                head_img=models.ImageField('文章图片',upload_to='uploads')
            ModelForm生成的html:
                <input type="file" name="head_img" accept="image/*" class="form-control" required="" id="id_head_img">
            views:
                article_form=ArticleModelForm(request.POST,request.FILES)
                if article_form.is_valid():
                    article_form.save()
                或者：
                if article_form.is_valid():
                    data=article_form.cleaned_data      #利用cleaned_data将其变成字典形式
                    print(type(data))
                    data['author_id']=request.user.userprofile.id
                    article_obj=models.Article(**data)
                    article_obj.save()
    注意：
    file_obj=request.FILES.get('filename') 得到的是一个对象，print出来虽然时文件名，但实际类型为一个对象。
    如果要获取名称，就需要file_obj.name才能获取名称

    https://docs.djangoproject.com/en/2.1/
    https://docs.djangoproject.com/en/2.1/topics/http/file-uploads/

登录验证url跳转地址
    登录的url可以在settings里面直接指定全局的，也可以在这里指定特定的url.
    比如login_url='/bbs/login'将会自动跳转到/bbs/login.如果不指定，那么就用settings里面设置的LOGIN_URL地址
    方式1
        @login_required(login_url='/login')
    方式2
        settings里面
        LOGIN_URL = '/login/'

让后端传过来的html标签生效，不显示标签
    从后端传过来的元素默认都会当成字符串，导致html标签不生效。需要调用内置函数safe，让前端解析html标签，而不是当做字符串显示出来
    {{ article_obj.content|safe }}

前端for循环元素倒序
    我们想让最后发的帖子放在第一位，所以就需要对帖子for循环时倒序显示，让后面的帖子显示在前面,reversed用于反转
    注意 reversed 不要写错了，否则就报错 'for' statements should use the format 'for x in y': for article in article_list reverse
    {% for article in article_list reversed %}

json.dumps() json.loads()是python里面的写法。
json.dumps() 将字典形式的数据转换为字符串，即序列化。一般跨平台跨语言的数据传递，用json.dumps()将其转换为大家公认的json格式。
            使用场景：views函数生成的字典传递给前端接收需要json.dumps，以实现python到js跨语言的数据传递。
json.loads() 将字符串格式的字典转换为字典，即反序列化。从别的语言或接口获取到的数据，一般用json.loads()将其转换为python识别的格式。
            使用场景：获取aliyun api接口的数据后，就需要json.loads来将传过来的数据转换为字典。前端js传递的数据被stringify为字符串也需要转换为字典。
json.dump() 和 json.load() 来编码和解码JSON数据,用于处理文件。而不是处理字符串。json.dump()用于将数据以json格式写入文件。json.load()用于读取json文件。
    print(data)
    [{'c': 'C', 'b': (1, 6), 'a': 'A'}]

    sort_keys根据key排序输出
    print(json.dumps(data, sort_keys=True))
    [{"a": "A", "b": [1, 6], "c": "C"}]

    indent=4换行输出
    json.dumps(data,sort_keys=True,indent=4)
    '[\n    {\n        "a": "A",\n        "b": [\n            1,\n            6\n        ],\n        "c": "C"\n    }\n]'

    separators去掉,:后面的空格，精简输出
    print(json.dumps(data,sort_keys=True,separators=(',',':')))
    [{"a":"A","b":[1,6],"c":"C"}]

    ensure_ascii 是否以ascii码显示
    print(json.dumps('中国'))
    "\u4e2d\u56fd"
    print(json.dumps('中国',ensure_ascii=False))
    "中国"

JSON.stringify() JSON.parse()是js语言的写法。作用和前面的json.dumps,json.loads类似
JSON.stringify(msg_item)
    JSON.stringify() 方法是将一个JavaScript值(对象或者数组)转换为一个 JSON字符串，
    如果指定了replacer是一个函数，则可以选择性的替换值，或者如果指定了replacer是一个数组，可选择性的仅包含数组指定的属性。
JSON.parse()
    将字符串解析为js格式的数据。

注意前端获取到的值
    通过[0]获取到的是一个标签，对于标签我们是不能attr()的，因为attr()是jquery对象的功能，标签是没有这个功能的。
    只不过我们可以用$()来将标签转换为jquery对象，再就可以attr了
    错误写法
        $('.wrap-left').children('.article-box')[0].attr('id')
    正确写法
        $($('.wrap-left').children('.article-box')[0]).attr('id')
    或者直接用first()，得到的也是一个jquery对象
         $('.wrap-left').children('.article-box').first().attr('id')
    但是first()只能拿到子节点第一个对象，如果我们要拿第二个，第三个等就不行了。这时候还是的用上面的方法。
    拿第二个子节点对象里面的id属性
        $($('.wrap-left').children('.article-box')[1]).attr('id')


    注意前端要通过JSON.stringify将html对象转换为了字符串，这样才能传给后端，否则后端收不到

    html:
        $.post(
        "{% url 'send_msg' %}",
        {data: JSON.stringify(msg_item)},   //注意这里要JSON.stringfy序列化成字符串，不然后端取不到数据。
        //下面的data:msg_item，传到后端取不到数据的，返回None
        {#{data: msg_item},#}
        function (callback) {
            console.log(callback)
        }
    后端收到后，需要json.loads将传过来的字符串再解析成字典。
    前端传过来的都是字符串形式的值，msg_data['to']得到的是字符串格式的id，数据库拿到的又是整数的id，所以需要Int转换成一致
    views:
        msg_data=request.POST.get('data')
        msg_data=json.loads(msg_data)       #json.loads将字符串转换为字典，但字典里面的id已经是字符串。
        user_id=int(msg_data['to'])         #这里要把字典里面的id转换成整数，这样才能和数据库里面拿到的id相等
        request.user.userprofile.id         #这里拿到的Id是数据库返回的，是整数

    异步回调函数
        通过自己调用自己，来实现不停的无限循环。
        这个和python的递归不一样，递归是一直进入，直到最里层再一步步从内而外的退出。这个最多999层。
        js里面这种回调不会这样，当进入到新的函数时，上一个函数会自动退出，所以函数始终还是一个，不会越来越多层导致卡死。
    html:
        function GetNewMsgs() {
            $.getJSON(
                "{% url 'get_new_msg' %}",
                function (callback) {
                    console.log(callback);
                    GetNewMsgs();       //异步回调函数，这个和python不一样，python会有最大层数限制，这个不会
                }
            )
        }
    下面的views配合上面的回调函数。当没有消息时，队列挂起，等待60s，直到超时。有消息就立刻插入到msg_list里面，并返回函数。
    当函数返回后，前端的GetNewMsgs()的funcation就会得到返回值，从而执行function(callback){}函数，进入下一次的循环。
    如果没有消息，那么就会等待60s，这60s内，前端function由于没有得到返回值，所以function(callback)函数也就不会执行。GetNewMsgs挂起状态。
    60s过后，que_obj.get抛出超时异常，函数继续向下执行retrun返回。这时function(callback)获取到返回数据，打印console.log后，执行GetNewMsgs()进入下一轮循环。
    所以，这个html和views结合的效果就是，如果queue队列有消息，立马console.log打印消息，如果没有消息，每60s执行一次console.log打印消息.
    views:
        try:
            # 设置超时60s，60s内如果有内容进来就append，没有就挂起等待60s直到抛出超时异常。
            msg_list.append(que_obj.get(timeout=60))
        except queue.Empty:
            print('等待超时了')
        return HttpResponse(json.dumps(msg_list))

一个困扰很久的错误解决
这个问题告诉我们，匹配标签的时候一定不要出错，否则后果很严重！

    评论框标签
        <div class="comment-box">
                <div class="comment-area">
                <textarea class="form-control" rows="4"></textarea>
                <button class="btn btn-sm btn-primary pull-right" style="margin-top:10px;">评论</button>
                </div>
        </div>

    正确示例：
        clone上面的标签
                var comment_div=$(".comment-area").clone(true);
                $('.comment-area').remove();
                $(this).parent().append(comment_div);
        获取标签内容
            $('.comment-area button').click(function () {
                    var comment_text = $('.comment-area textarea').val();
                    console.log(comment_text);

    错误示例：
        clone上面的标签
                var comment_div=$(".comment-area").clone(true);
                $('.comment-area').remove();
                $(this).parent().append(comment_div);
        获取标签内容
            $('.comment-box button').click(function () {
                    var comment_text = $('.comment-box textarea').val();
                    console.log(comment_text.trim());

    上面的示例会导致无法获取到comment_text数据，console.log(comment-text)返回undefinde，而console.log(comment_text.trim())则会直接报错，
    因为comment_text没有值，不能直接trim().
    trim()报错如下：
        Uncaught TypeError: Cannot read property 'trim' of undefined
            at HTMLButtonElement.<anonymous> (3:177)
            at HTMLButtonElement.dispatch (jquery-2.1.4.js:4435)

    原因：
        clone的是comment-area区域，而下面获取标签绑定的是comment-box下面的button，且获取的val也是comment-box下的button
        而我们clone时，并没有把comment-box复制过来，而只是复制了comment-box下面的comment-area标签，就导致了标签没有comment-box，
        从而无法触发comment-box下的button触发的事件，也无法获取到comment-area下的textarea的值。
        但是comment-area下的button还是可以点击的，因为这是一个button固有的属性。但是无法触发事件。

