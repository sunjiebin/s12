知识点：
    URL
        -
        命名空间
        在总的url里面
        /admin/ include('app01.urls',namespace='m1')
        /crm/   include('app01.urls',namespace='m2')
        在下级url里面
        app01.urls
        /index/ name='n1'
        函数里面反转就可以通过namespace:name来匹配到对应的url了
        reverse('m1':'n1')      -->/admin/index/

        From表单提交
            提交 --> url -->函数或者类中的方法

        ajax:
            $.ajax({
                url:'index',
                data:{'k':'v'},   $(form对象).serialize()
                type:'POST',
                dataType:'JSON',
                traditional:true,
                success:function(d){
                    location.reload()          #刷新
                    location.href = '某个地址' #跳转
                }
            })
            提交-->url-->函数或者方法
                    HttpResponse('xxx')
                    render(request,'index.html',

        def func(request):
            request.POST
            request.GET
            request.FILES
            request.getlist
            request.method
            request.path_info



    Views

        - 请求的其他信息
        获取请求头里面的信息
        from django.core.handlers.wsgi import WSGIRequest
        request.environ实际是一个包含所有请求信息的字典
        request.environ
        获取请求头里面客户端类型的字典。
        request.environ['HTTP_USER_AGENT']
        - 装饰器
            FBV
            def auth(func):
                def inner(request,*args,**kwargs):
                    v=request.COOKIES.get('username')
                    if not v:
                        return redirect('/login/')
                    return func(request,*args,**kwargs)
                return inner
            CBV
            from django.utils.decorators import method_decorator
            from django import views

            #也可以直接在类前面写上装饰器，name='dispatch'代表对类里面的dispatch方法生效。
            @method_decorator(auth,name='dispatch')
            class Order(views.View):

                #dispatch方法将会在类里面所有其他方法执行前执行，所有，在dispatch方法前面加上装饰器，意味着在所有方法前加上了装饰器。
                # @method_decorator(auth)代表执行装饰器，将定义的auth装饰器执行。@method_decorator是django定义的一个执行装饰器的方法。
                @method_decorator(auth)
                def dispatch(self, request, *args, **kwargs):
                    return super(Order, self).dispatch(request,*args,**kwargs)

                def get(self,request):
                    v=request.COOKIES.get('username')
                    return render(request,'index.html',{'current_user':v})

                def post(self,request):
                    pass

    Models


    Templates
        - 母版
            extends 只能继承一个
            include 可以任意个
        - 自定义函数
            simple_tag
            a. app下创建templatetags目录，注意目录名称不能改
            b. 在templatetags下创建任意xxoo.py函数
            c. 创建template对象register，注意register名称是固定的，不能随便写
                from django import template
                register = template.Library()
            d. 函数前面加上装饰器，再写自定义的函数
               @register.simple_tag
               def func(a1,a2,a3)
                    return 'abcd'
            e. 在settings中注册app
            f. 在html文件顶部引用
                {% load xxoo %}
            g. html文件中调用
                {% func arg1 arg2 arg3 %}
            优点：参数任意个
            缺点：不能作为if条件使用

            filter
            a. app下创建templatetags目录，注意目录名称不能改
            b. 在templatetags下创建任意xxoo.py函数
            c. 创建template对象register，注意register名称是固定的，不能随便写
                from django import template
                register = template.Library()
            d. 函数前面加上装饰器，再写自定义的函数
               @register.filter
               def func(a1,a2)
                    return a1+a2
            e. 在settings中注册app
            f. 在html文件顶部引用
                {% load xxoo %}
            g. html文件中调用
                只能传两个参数，写法如下
                {{ 参数1|函数名:"参数2" }}
                如果要传入3个参数，那么要将多的参数都写道一个字符传里面，实际传入的还是两个参数。如"arg2,arg3".然后再函数里面通过split(',')来分割参数。
                {{ 参数1|函数名:"参数2，参数3" }}
                注意：：后面不能有空格。 {{ obj|func: "22" }}这样是错误的
                {{ obj|func:"22" }}
            优点：可以作为if条件
            缺点：参数只能两个，且写法严格不能有空格。如果要传入多个参数，那么就的将多个参数作为一个字符串传入，然后在函数里面对字符串分割


            django还内置了一些函数可以用，内置函数就是filter的模式
            比如我们传一个name变量给html模板，|lower就会将name变量里面的大写都转换为小写
            {{ name|lower }}
            获取变量的前30个字符
            {{ name|truncatewords:"30" }}
    cookie
        客户端浏览器上的一个文件
        {’k':'asdf'}
        浏览器f12-->networks-->需要cookies的页面-->Cookies 里面可以查看到该页面的cookies

         设置cookie，在函数中
         max_age=10设置10s后cookie过期
         res.set_cookie('username',u,max_age=10)
         在jquery中设置
         设置cookie，{'page_num':'v1'},并且只对路径/userlist/生效
         $.cookie('page_num','v1',{path:'/userlist/'});

         expires= 设置超时实间，这个后面接的是具体的过期时间，而不是多少秒之后
                import datetime
                #获取当前时间的时间戳
                current_date=datetime.datetime.utcnow()
                print(current_date)
                #timedelta在当前时间上加上5s
                expire_date=current_date+datetime.timedelta(seconds=5)
                res.set_cookie('username',u,expires=expire_date)
          path='/index'  cookie生效路径，只对指定的url生效，其他的url不生效。默认是path='/'，表示该cookie对本链接的所有url生效
                         这个应用场景可用于，比如你后台有很多页面，这个主机列表页你基于cookie让每页显示50条数据，
                         而另一个用户列表页你不希望也被影响，就可以设置指定url
          domain='www.my089.com' 生效的域名
          secure=False  是否加密传输（https)，默认Fasle
          httponly=False 只能http协议传输，无法被javascript获取。默认可以被javascript获取。在console控制台，可以用document..cookie来获取，设置True就不能了

         获取cookie
         在django的views函数中
         request.COOKIES.get('username')
         在jquery中
         $.cookie()     获取所有cookie
         $.cookie('k1') 获取key为k1的cookie
         删除cookie
         设置超时时间为当前时间就可以立即清除cookie了
         也可以设置为null
         $.cookie(‘the_cookie’, null);
    session


    分页（自定义分页）
        xss:
            {{ page_str|safe }}
            mark_safe(page_str)
    From验证

零散知识：
    onchanges代表选择点击事件，当选择里面选项时，就会触发onchanges事件，执行serach()函数，并将当前选择的标签传进去。
    <select onchanges="search()">
        <option value="10">10</option>
        <option value="20">20</option>
    </select>

    在浏览器里面设置cookie可以通过jquery的cookie插件完成。
    cookie默认明文存放，可以对cookie进行加密，salt='jiayan'就是对cooike进行加盐，jiayan相当于密码。所以设置和获取的salt值要一样。
    设置：
    obj=HttpResponse('s')
    obj.set_signed_cookie('username','kakaka',salt='jiayan')
    获取：
    request.get_signed_cookie('username',salt='jiayan')

注意：
    在js绑定事件的时候，绑定事件的函数需要将this传进去，否则下面Js调用时取不到传来的this值。
    比如下面是错误写法，下面的$(this)是取不到值的，jquery会直接报错。
    错误写法1  search()里面不接参数
    <select onchanges='search()'>
    function search(){
        var v = $(this).val()
    }
    错误写法2 定义function时，search()里面不能用this
    <select onchanges='search(this)'>
    function search(this){          <--不能写this
        var v = $(this).val()       <--不能写this
        }
    正确写法
    <select onchanges='search(this)'>   <--这里必须写this
    function search(ths){               <--这里不能写this，可以写其他的字符
        var v = $(ths).val()            <--这里的ths要与上面定义的serach(ths)一致
        }
