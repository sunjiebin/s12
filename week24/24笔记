Form验证
    自定义的UserInfoForm继承了Form，Form继承了BaseForm，BaseForm里面有is_valid等方法
    UserInfoForm --> Form -->BaseForm(is_valid...)
    自定义的UserInfoModelForm最终也继承了BaseForm，所以和上面的modelform一样，都有着相同的is_valide方法
    UserInfoModelForm -->ModelForm-->BaseModelForm-->BaseForm


    django默认用utc的时间，我们如果要让某个字段用东八区的时间，就要让字段本地化

    settings里面要做相应的配置才行
    TIME_ZONE='Asia/Shanghai'
    USE_TZ=True
    ModelForm里面的select拿到的外键是对象，用__str__让它拿到对应的值，而不是显示对象

ModelForm
    通过ModelForm可以生成html标签，能够实现form表单的验证，还能将验证完的数据提交到数据库里面去。将Model和Form的功能结合在了一起。
    通过modelform查询外键在页面上显示的是一个object对象，如果要像form一样显示对应的名称，则需要在函数里面用__str 。具体如何使用，暂时未知
    ModelForm存取POST提交的数据非常简单，直接obj.save()即可。

    1.生成HTML标签： class Meta: ...
    2. 将数据库里面的数据直接提取出来，显示在页面上。 instance里面接model对象
        mf = xxxModelForm(instance=Modelobj)
    3. 定义额外的标签
        is_rmb=Ffields.CharField(widget=widgets.CheckboxInput())
    4. 各种验证
        is_valid() -->各种勾子
    5. 保存到数据库
        当传入的值为False时，可以将多对多的保存拆开
        以下为等价的关系
        mf.save()  <==> instance=mf.save(False)
                        instance.save()
                        mf.save_m2m()
    ModelForm操作起来比Model更方便。但是也增加了model类的耦合，所以在小的项目场景是很方便的，在复杂场景可能用Model更好。