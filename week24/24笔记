Form验证
    自定义的UserInfoForm继承了Form，Form继承了BaseForm，BaseForm里面有is_valid等方法
    UserInfoForm --> Form -->BaseForm(is_valid...)
    自定义的UserInfoModelForm最终也继承了BaseForm，所以和上面的modelform一样，都有着相同的is_valide方法
    UserInfoModelForm -->ModelForm-->BaseModelForm-->BaseForm


    django默认用utc的时间，我们如果要让某个字段用东八区的时间，就要让字段本地化

    settings里面要做相应的配置才行
    TIME_ZONE='Asia/Shanghai'
    USE_TZ=True
    ModelForm里面的select拿到的外键是对象，用__str__让它拿到对应的值，而不是显示对象

ModelForm
    通过ModelForm可以生成html标签，能够实现form表单的验证，还能将验证完的数据提交到数据库里面去。将Model和Form的功能结合在了一起。
    通过modelform查询外键在页面上显示的是一个object对象，如果要像form一样显示对应的名称，则需要在函数里面用__str 。具体如何使用，暂时未知
    ModelForm存取POST提交的数据非常简单，直接obj.save()即可。

    1.生成HTML标签： class Meta: ...
    2. 将数据库里面的数据直接提取出来，显示在页面上。 instance里面接model对象
        mf = xxxModelForm(instance=Modelobj)
    3. 定义额外的标签
        is_rmb=Ffields.CharField(widget=widgets.CheckboxInput())
    4. 各种验证
        is_valid() -->各种勾子
    5. 保存到数据库
        当传入的值为False时，可以将多对多的保存拆开
        以下为等价的关系
        mf.save()  <==> instance=mf.save(False)
                        instance.save()
                        mf.save_m2m()
    ModelForm操作起来比Model更方便。但是也增加了model类的耦合，所以在小的项目场景是很方便的，在复杂场景可能用Model更好。

Ajax
    jquery是对原生ajax进行的上层封装，底层还是调用的ajax。
    注意在ajax里面语法不要写错了，比如少了}，出现这种错误会导致ajax无法正常执行，但是程序又不会报错。

    在jquery中创建一个对象
    xhr= new XMLHttpRequest()
    该对象主要包含了以下几种方法
    a.创建请求
        xhr.open('GET','/login/')
        参数：请求方式  请求地址  是否异步（默认异步提交）
    b.发送请求
        xhr.send('string body')
    c.设置请求头
        数据发送过去包含了请求头和请求内容，这里设置请求头
        xhr.setRequestHeader()
    d.获取所有响应头
        xhr.getAllResponseHeaders()
    e.获取指定的响应头
        和上面的不一样的是，可以获取指定某一个响应头的值
        xhr.getResponseHeader(string header)
    f.终止请求
        如果ajax请求一直未完成，可以设置终止掉该请求
        xhr.abort()

    其它功能
    a.获取状态值
        获取当前ajax的状态值，得到ajax执行在哪个阶段
        xhr.readyState
        0 未初始化方法，尚未调用open()方法
        1 启动  调用了open方法，未send()
        2 发送  调用了send()，但未接收数据
        3 接收  已经接收了部分数据
        4 完成  数据已经全部接收

    xhr.onreadystatechange 当状态发生改变时，都会触发该函数
    xhr.responseText 获取服务器返回的数据
    xhr.responseXML 获取返回的xml对象
    xhr.states  获取返回的状态码 如200 404
    xhr.statesText 获取返回的状态文本 如OK NotFound

    注意用ajax发送POST数据时，必需要先设置请求头的类型。然后要注意content-type这里是中划线。
    xhr.setRequestHeader('content-type','application/x-www-form-urlencoded;charset-UTF-8');

    注意在ajax里面创建变量用 xhr = new XMLHttpRequest(),在jquery里面是 var xhr = $('#xxoo')

    我们有三种方式可以提交数据，那么选择顺序可以如下。
    如果发送的是普通数据，先用jquery提交，jquery不行再用XMLHttpRequet，最后再用iframe

文件上传
    - from提交
    - ajax上传文件
    时机
        如果发送的是文件 --> iframe优先，jquery(FormData),XMLHttpRequest(FormData)
        jquery和XMLHttpRequest都依赖FormData对象，而FormData并不是所有浏览器兼容的，对于老版本的IE是不支持的。
        所以，上传文件尽量都使用iframe，这个不存在兼容性问题。

图片验证码
    - session
    - check_code.py(依赖：Pillow,字体文件)
    - 点击刷新 src属性后面加上？

    1.访问页面url
    - 先创建一个图片并返回给用户
    - session存放验证码

    创建一个bytesio对象
    stream = BytesIO()
    调用函数生成验证码图片和对应验证码
    img, code = create_validate_code()
    将图片保存在内存对象里面
    img.save(stream,'PNG')
    将随机验证码保存在session中
    request.session['CheckCode'] = code
    将内存里面的图片拿出来并返回给浏览器
    return HttpResponse(stream.getvalue())

    实现点击验证码就刷新
    先绑定一个点击事件
    <img src="/check_code.html" onclick="changeCheckCode(this);">
    当点击时，将img里面的src属性的值进行修改，多加一个?号，这样url就变化了，就会重新请求服务器，拿到新的随机验证码。
    如果url还是原来的，那么浏览器不会去再次请求，所以这里要把url改变一下
            function changeCheckCode(ths){
            ths.src = ths.src +  '?';

        }

富文本编辑
    http://kindeditor.net

       $(function () {
        {# 如果{}什么都不加，那么就是用默认功能，里面参数非常多，可以参考官方文档#}
        KindEditor.create('#content',{
            width:'100%',   //可以百分比或者像素
            height:'300px', //文本框高度（只能像素）
            minWidth:'50',  //最小宽度（像素）
            minHeight:'200',
            {#items:[         //指定显示的插件，默认是全部都有#}
        {#'source', '|', 'undo', 'redo', '|', 'preview', 'print', 'template', 'code', 'cut', 'copy', 'paste',#}
        {#'plainpaste', 'wordpaste', '|', 'justifyleft', 'justifycenter', 'justifyright',],#}
        {#    noDisableItems:['source','undo','redo','fullscreen'],   //指定插件可用，其他插件都是灰色不可选，依赖designMode为false#}
        {#    designMode:false,#}
        })
    })
    还支持很多参数
    afterCreate
    afterChange