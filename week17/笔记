jquery
    python的模块在jquery中就是类库
    集合了dom/bom/javascript的类库
    主要分为
    一  查找元素
        jquery:
            选择器
            1. id
            $('#id')
            2. class
            $('.classname')
            3. 标签
            $('标签名')
            4. 组合
             同时找到所有的a标签,class名为c2的,id为i10的标签
            $('a,.c2,#i10')
            5. 层级关系
            找到i10下的子子孙孙的a标签,即i10下所有的a标签.
            $('#i10 a')
            找i10下的子标签,不包括孙子
            $('#i10>a')
            找i10下的子标签a,只要第一个a标签
            $("#i10>a:first")
            索引  找到i10下所有a标签的第二个标签 eq等于,还可以lt小于 gt大于
            $("#i10 a:eq[1]")
            根据属性查找
            <a alex='123'>f2</a>
            <a alex='432'>f3</a>
            $('[alex]')  会把所有的属性为alex的标签都找出来
            $('[alex="123"]')  会把alex='123'的找出来
            找到input表单
            $('input[type="text"]')
            $(':text')
         实例:
            多选,反选,全选
                 $('#tb :checkbox').prop('checked',false)  设置值
                  $('#tb :checkbox').prop('checked')  获取值
            jquery内置循环  $('#tb checked').each(function(k){
                    k 标签
                    //this DOM 当前循环元素，如果要用jquery处理，那么$(this)
            三元循环
                    var v=条件?真值:假值
                    如下两行，检测选框是否选定，如果checked返回true，则代表选定，那么就将其设置为false即取消选定，如果不是选定，则设置为选定，实现反选效果。
                     var v=$(this).prop('checked')?false:true;
                     $(this).prop('checked',v)
            筛选
                $('#i1').next()
                $('#i1').nextAll()    找下面所有的
                $('#i1').nextUntil()  找直到指定标签的
                $('#i1').prev()
                $('#i1').parent()
                $('#i1').parents()  找到所有父级标签
                $('#i1').parentsUntil('.c1')  往上找直到class为c1的父级标签为止

                $('#i1').siblings()
                $('#i1').find('aa')
                $('#i1').children()
                $('#i1').eq(1)



        <script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.12.4.min.js"></script>
        jquery的底层实际还是调用的document,只是封装了.
        dom和jquery转换
        jquery --> dom
        $("#i1")[0]  --> document.getElementById('i1')
        dom --> jquery
        d=document.getElementById('i1')
        $(d)        <--dom转为jquery格式了

        jquery有三个版本 1 2 3
        1系列兼容性比较好,从2开始就已经不兼容678版本的老IE了

    二  操作元素
09节
    文本操作
    $().text() 获取标签里面的文本
    $().text('aa')  赋值,不解析html语法

    $().html()
    $().html('<a>1</a>')  赋值html

    $().val() 获取值
    $().val('222') 设置值
    注意val()和text()以及attr()的区别，val是获取标签中value属性的值，一般多用于input标签，而text是获取标签里面的文本值。而attr（）是取任意自定义属性的值，包括value属性
     示例： 下面的input val获取到“这是一个input标签1”,attr('value')也可以获取到值
     <input type="text" id="input1" value="这是一个input标签1">
     下面val获取不到值，但text可以获取到 “div有文本内容”
     <div id="div1">div有文本内容</div>
     下面标签attr('name')能够取到，val()取不到。
     <div name='host'><div>


   dom中
        tag=document.getElementById('i2')
        tag.value
        tag.value='123'
    jquery  (注意调用的时候要在页面中引用jquery文件,否则会报错TypeError: Object #<HTMLInputElement> has no method 'val')
        $('#i2').val()
        $('#i2').val('dflkj')

   样式操作
        addClass   添加class样式
        removeClass   删除class样式
        $('#i2').toggleClass('hide');   反复添加删除，实现开关的效果，就像视屏网站里面的开灯关灯类似

   属性操作
        #专门用于做自定义属性
        attr获取属性里面的值
        $('#i1').attr('type')
        $('#i1').attr('value')
        修改value的值
        $('#i1').attr('value','确认')
        新增值 如果属性不存在则新增 name='hha'
        $('#i1').attr('name','hha')
        removeAttr() 删除属性


        prop专门用于checkbox,radio的选中与取消
        注意这里一定不要用attr来设置checked属性,这个会有bug,导致设置不生效
        $('#i1').attr('checked','checked')    这个勾选的方法不要用
        用prop专门来处理这类操作
        $('input[type="checkbox"]').prop('checked',true)

        index()可以获取索引的位置

   文档处理
        append   在子标签最下面添加元素
        prepend  在子标签最上面添加元素
        after    在同级标签下面添加元素
        before   在同级标签上面添加元素
        remove   删除标签
        empty    情况标签里面的内容
        clone    克隆整个标签

    css处理（15节）
        $('t1').css(‘样式名称’,'样式值')
        点赞：
            $('t1').append()
            $('t1').remove()
            setInterval
            opactiy 1-->0
            position
            font-size

        滑动条位置
            window为浏览器最外层那个滚动条
            $(window).scrollTop()           获取系统滚动条位置
            $(window).scrollTop(100)        设置滑动条位置100
            $('div').scrollTop()            获取div标签的滚动条位置
            scrollLeft() 左右滚动条
            offset  指定标签在html中的坐标

            $('[value="找找看"]').offset() 获取标签离顶部和左边的距离，返回的是字典
            $('[value="找找看"]').offset().top 获取标签离顶部的距离，返回的是数字
            $('[value="找找看"]').offset().left 获取标签离左边的距离，返回的是数字

            position()  指定标签相对于父标签(relative)的坐标
            <div style='position:relative'>
                <div>
                    <div id='i1' style='position:absolute'><div>
                </div>
            </div>
            $('#i1').position()   获取i1相对于外面relative的相对坐标
            $('#i1').height() 获取标签高度
            $('#i1').innerHeight() 获取标签高度
            $('#i1').outerHeight() 获取标签高度
            $('#i1').outerHeight(true) 获取标签高度


事件
        DOM:三种绑定方式
        jquery:
            $('c1').click()
            $('c1').bind('click',function{})
            $('c1').unbind('click',function{})
            delegate可以对页面新增的元素自动生成绑定事件,其他几种只会对一开始加载的元素生效,
            后面通过浏览器新增的元素绑定事件是不能生效的.
            c1父级标签,a子级标签,click点击事件
            $('c1').delegate('a','click',function{})
            $('c1').undelegate('a','click',function{})
             $('ul').delegate('li','click',function () {})

            上面几种方式其实都是调用的下面的on方法
            $('c1').on('click',function(){})
            $('c1').off('click',function(){})
        阻止事件的发生
            return false
        当页面框架加载完成后就执行
            $(function(){
                $(xx)
            })
        jquery扩展
            $.extend(){}        执行方式  $.方法
            $.fn.extend(){}     执行方式  $('#aa').方法
         自己定义方法时,先用一个自执行函数,然后在里面写函数
            (function(){
                xxx
            })(jQuery)