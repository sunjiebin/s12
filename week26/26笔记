
一. cmdb
    - 资产采集
    - api
    - 后台管理
        - 资产列表
        - 业务列表
        - 用户列表
        - 组列表
        ....

    对于后台管理，有很多都是对数据库进行查询和修改等操作，我们可以写一个公共的组件来完成这些功能，这样就不用重复的写代码了。
    公共组件：删改查
    查：
    将查询条件，返回的列都做成统一的配置文件
        result = models.TB.object.filter(条件).values(要返回的列)  #返回形式：[{},{},{}]
        资产列表：
            config=[
                {
                    'q':'id',
                }
                {
                    'q':'name',
                }
                ]
            value_list=['id','name']
            result = models.TB.object.filter(条件).values(*value_list)

将js代码解耦，做成一个插件可供其他页面调用
    1. 先创建一个nb_list.js的文件
    2. 创建一个自执行的函数，目的在于将函数里面的其他函数封装在里面，这样就避免了插件里面的函数名称和代码里面的函数名称重复。
        (func(){xxx})();
    3. 在自执行函数里面定义一个外部接口函数，这样其它页面就可以通过这个函数来调用接口函数里面封装的其他函数了。
        如下：先jq.extend来定义一个扩展，里面定义Int，在Int里面对应执行init()函数。
        (func(jq){
            var requesturl;
            function init(){
              .....
            }
            ....
            jq.extend({                 //注意：这里的jq要与上面的function(jq)对应
                /*
                从外部调用时，可以传递参数进来，参数url就是接受外面传递的参数。
                外部调用方法：$.Int('/server-json.html');
                此时 url='server-json.html'
                requesturl在自执行函数上面有定义。
                 */
                'Int':function (url) {
                    requesturl = url;
                    init();
                }
            })
        })(jQuery);     //注意：这里必须要写jQuery将jquery传进来，如果不传进来，那么jq.extend方法就找不到。另外，这里要写jQuery，不是jquery，两个不是同一个东西。
    4. 其他页面的js里面通过 $.Int('/server-json.html')来调用。从而触发执行init()函数。并且，还可以把参数进去。

本节需要注意的知识点：
    1. models查询数据库时用values()来显示指定列，里面可以接列表。但是要注意是values(*value_list).前面的*不能少。
    同样的，filter()查询时，里面可以接字典，字典需要用filter(**dict).
    这个就是一个函数，函数里面可以接参数，和func(*args,**kwargs)的用法是一样的。
    result=models.Server.objects.values(*value_list)
    另外，通过models查询出的数据时QuerySet类型的数据，如果我们要循环操作，需要用list将它转换为列表。
    result=list(result)

    2. 返回数据给前端的ajax时，传过去的要是一个字符串。所以这里需要json.dumps序列化一下。然后在前端再dataType: 'JSON'反序列化解析出来。
    BaseResponse().__dict__拿到的时这个类中定义的静态属性，会以字典形式返回
    views.BaseResponse().__dict__  将返回 {'status': True, 'data': None, 'message': None}

    class BaseResponse(object):
    def __init__(self):
        self.status=True
        self.data=None
        self.message=None

    response=BaseResponse()
    return HttpResponse(json.dumps(response.__dict__))

    3. 注意从ajax里面传过来的arg.data.table_config是一个document对象。不再是views里面的列表。
    arg.data.table_config得到的数据形式如下,所以对这个对象循环，第一个值是索引0，1，2。数据要取第二个值。
    [
    0：{q: "hostname", title: "主机名", display: 1}
    1:{q: "user_id__name", title: "用户组", display: 0}
    2:{q: "port", title: "端口", display: 1}
    ]
        $.ajax({
            url: requesturl,
            type: 'GET',
            dataType: 'JSON',
            success: function (arg) {
                    createTablehead(arg.data.table_config);
                    createTablebody(arg.data.table_config, arg.data.data_list);
            }
        })
        用each对传过来的document对象进行循环，第二个值v才是我们需要的具体数据。
        function createTablehead(config) {
            $.each(config, function (k, v) {
            console.log(k, v);       // k:0 v:{title: "主机名", display: 1}   k:1 v:{title: "用户组", display: 0}
            }
        }

    4.注意var listname=configitem.q，这里面configitem.q得到的是字符串，而不是一个对象。所以不能直接用row.listname调用。
      这个当你console.log(listname)时，得到的是hostname，所以会觉得row.listname就是row.hostname,实际上并不是这样。
      实际上 row.listname = row."hostname", "hostname"是字符串不是对象，所以这是页面时会报错的。正确的用法时row["hostname"]
      row[listname]=row["hostname"]这才是对的。

                $.each(tableconfig, function (k2, configitem) {
                if (configitem.display == 1) {
                    var listname = configitem.q;
                    var td = document.createElement("td");
                    /*
                   注意：这里用row.listname是不行的，必须用row[listname]。因为变量listname得到的值是一个字符串。相当于row['hostname']
                   我们用row.hostnmae可以得到key值，但是row.listname是不行的，虽然listname="hostname",这相当于row."hostname"
                    */
                    console.log('listname类型',typeof listname);
                    td.innerText = row[listname];           //这里用row.listname时错误的
                    tr.append(td);
                }


    5. format格式化输出
        生成下面的函数，后面在js页面可以用 .format 来调用它
        String.prototype.format=function (args) {
        return this.replace(/\{(\w+)\}/g,function (s,i) {
            return args[i];
        })
        };
        使用示例：
        '{n}-{m}-test'.format({'n':'sun','m':'jie'})
        得到结果："sun-jie-test"
       示例2：
        # configitem.text.content = '{n}-{m}'
        # kwargs = {'n': '深圳区', 'm': '小v'}
        newstring=configitem.text.content.format(kwargs);
        替换结果就是
        newstring = '深圳区-小v'

    6. 在配置中定义变量
    我们可以利用这个动态生成表单，将数据库里面的数据二次加工生成到td表格里面，还可以动态生成td表单属性。
    在函数的配置文件中定义一个@hostname：
        'text':{'content':'{n}-{m}','kwargs':{'n':'华东1','m':'@hostname'}},
    在Js的函数中,对@开头进行判断，如果以@开头，就截取@后面的字符串（这个字符串是数据库的字段名），并将字符串row[v]即取到数据库中该字段的值。然后赋值给Kwargs。
    如果不是以@开头，则不处理。最终将kwargs里面的@hostname转换为具体的值。
    如：'kwargs':{'n':'华东1','m':'@hostname'}  ---> 'kwargs':{'n':'华东1','m':'zabbix'}
        $.each(configitem.text.kwargs,function (key,value) {
            if (value.startsWith('@')){         //如果得到的值是以@开头，则进入判断
                var v=value.substring(1,value.length);      //从第二个字符开始截取，直到最后。就是截取@之后的字段，如@hostname就会得到hostname
                kwargs[key]=row[v]              // 从row字典里面拿到拿到对应v列的数据，并写入到kwargs字典
            }else{
                kwargs[key]=value
            }
        });


    1. 写配置文件

    2. 拷贝html页面

    3. 添加url

    4. 复制修改view函数

算法：
    时间复杂度算法
    o(1)<o(logn)<o(n)<o(nlogn)<o(n平方)<o(n平方logn)<o(n立方）
    不常见的事件复杂度
    o(n阶乘) o(2的n次方) o(n的n次方)

    判断函数事件复杂度的简便方法
    函数有对半砍的情况就是o(logn)
    如： while n>1:
            print(n)
            n = n//2
    函数有几层循环就是n的几次方，如两层就是o(n平方)
    如： for i in n:
            for j in n:
                print(j)

    空间复杂度
    a='b'  o(1)
    a=['1','a']  o(n)
    b=[a,a] o(n方)